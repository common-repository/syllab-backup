/*
The plugin code, syllab-backup, limited to this Wordpress public repository: https://plugins.trac.wordpress.org/browser/syllab-backup/ is a fork of DavidAnderson (2015) source code (Version 1.11.3) [Source code]. https://github.com/wp-plugins/updraftplus. 
The other contributors and developers of the [Source code] cited here (Version 1.11.3):
https://profiles.wordpress.org/backup-with-updraftplus/,  https://profiles.wordpress.org/dnutbourne/, https://profiles.wordpress.org/snightingale/, https://profiles.wordpress.org/aporter/, https://profiles.wordpress.org/bcrodua/

*/
function syllab_send_command(t, e, r, n) {
    for (var a in default_options = {
            json_parse: !0,
            alert_on_error: !0,
            action: "syllab_ajax",
            nonce: syllab_credentialtest_nonce,
            nonce_key: "nonce",
            timeout: null,
            async: !0,
            type: "POST"
        }, void 0 === n && (n = {}), default_options) n.hasOwnProperty(a) || (n[a] = default_options[a]);
    var o = {
        action: n.action,
        subaction: t
    };
    if (o[n.nonce_key] = n.nonce, "object" == typeof e)
        for (var d in e) o[d] = e[d];
    else o.action_data = e;
    t = {
        type: n.type,
        url: ajaxurl,
        data: o,
        success: function(e, t) {
            if (n.json_parse) {
                try {
                    var a = ud_parse_json(e)
                } catch (t) {
                    return "function" == typeof n.error_callback ? n.error_callback(e, t, 502, a) : (console.log(t), console.log(e), void(n.alert_on_error && alert(syllablion.unexpectedresponse + " " + e)))
                }
                if (a.hasOwnProperty("fatal_error")) return "function" == typeof n.error_callback ? n.error_callback(e, t, 500, a) : (console.error(a.fatal_error_message), n.alert_on_error && alert(a.fatal_error_message), !1);
                "function" == typeof r && r(a, t, e)
            } else "function" == typeof r && r(e, t)
        },
        error: function(t, e, a) {
            "function" == typeof n.error_callback ? n.error_callback(t, e, a) : (console.log("syllab_send_command: error: " + e + " (" + a + ")"), console.log(t))
        },
        dataType: "text",
        async: n.async
    };
    null != n.timeout && (t.timeout = n.timeout), jQuery.ajax(t)
}

function syllab_delete(t, e, a) {
    jQuery("#syllab_delete_timestamp").val(t), jQuery("#syllab_delete_nonce").val(e), a ? jQuery("#syllab-delete-remote-section, #syllab_delete_remote").prop("disabled", !1).show() : jQuery("#syllab-delete-remote-section, #syllab_delete_remote").hide().attr("disabled", "disabled"), -1 < t.indexOf(",") ? (jQuery("#syllab_delete_question_singular").hide(), jQuery("#syllab_delete_question_plural").show()) : (jQuery("#syllab_delete_question_plural").hide(), jQuery("#syllab_delete_question_singular").show()), jQuery("#syllab-delete-modal").dialog("open")
}

function syllab_remote_storage_tab_activation(t) {
    jQuery(".syllabplusmethod").hide(), jQuery(".remote-tab").data("active", !1), jQuery(".remote-tab").removeClass("nav-tab-active"), jQuery(".syllabplusmethod." + t).show(), jQuery(".remote-tab-" + t).data("active", !0), jQuery(".remote-tab-" + t).addClass("nav-tab-active")
}

function set_email_report_storage_interface(t) {
    jQuery("#cb_not_email_storage_label").css("display", !0 === t ? "none" : "inline"), jQuery("#cb_email_storage_label").css("display", !0 === t ? "inline" : "none"), !0 === t ? jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon input#syllab_email").on("click", function(t) {
        return !1
    }) : jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon input#syllab_email").prop("onclick", null).off("click"), jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon input#syllab_email").is(":checked") || jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon input#syllab_email").prop("checked", t), jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon input#syllab_email").prop("disabled", t);
    var e = jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon input#syllab_email").val();
    jQuery('#syllab-navtab-settings-content #syllab_report_row_no_addon label.email_report input[type="hidden"]').remove(), !0 === t && jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon label.email_report input#syllab_email").after('<input type="hidden" name="syllab_email" value="' + e + '">')
}

function syllab_check_overduecrons() {
    syllab_send_command("check_overdue_crons", null, function(t) {
        if (t && t.hasOwnProperty("m") && Array.isArray(t.m))
            for (var e in t.m) jQuery("#syllab-insert-admin-warning").append(t.m[e])
    }, {
        alert_on_error: !1
    })
}

function syllab_remote_storage_tabs_setup() {
    var r = 0,
        n = jQuery(".syllab_servicecheckbox:checked");
    jQuery(n).each(function(t, e) {
        var a = jQuery(e).val();
        "syllab_servicecheckbox_none" != jQuery(e).attr("id") && r++, jQuery(".remote-tab-" + a).show(), t == jQuery(n).length - 1 && syllab_remote_storage_tab_activation(a)
    }), 0 < r ? (jQuery(".syllabplusmethod.none").hide(), jQuery("#remote_storage_tabs").show()) : jQuery("#remote_storage_tabs").hide(), jQuery(document).on("keyup", function(t) {
        32 !== t.keyCode && 13 !== t.keyCode || !jQuery(document.activeElement).is("input.labelauty + label") || (t = jQuery(document.activeElement).attr("for")) && jQuery("#" + t).trigger("change")
    }), jQuery(".syllab_servicecheckbox").on("change", function() {
        var t = jQuery(this).attr("id");
        "syllab_servicecheckbox_" != t.substring(0, 23) || null != (t = t.substring(23)) && "" != t && (jQuery(this).is(":checked") ? (r++, jQuery(".remote-tab-" + t).fadeIn(), syllab_remote_storage_tab_activation(t), jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon").length && "email" === t && set_email_report_storage_interface(!0)) : (r--, jQuery(".remote-tab-" + t).hide(), 1 == jQuery(".remote-tab-" + t).data("active") && syllab_remote_storage_tab_activation(jQuery(".remote-tab:visible").last().attr("name")), jQuery("#syllab-navtab-settings-content #syllab_report_row_no_addon").length && "email" === t && set_email_report_storage_interface(!1))), r <= 0 ? (jQuery(".syllabplusmethod.none").fadeIn(), jQuery("#remote_storage_tabs").hide()) : (jQuery(".syllabplusmethod.none").hide(), jQuery("#remote_storage_tabs").show())
    }), jQuery(".syllab_servicecheckbox:not(.multi)").on("change", function() {
        set_email_report_storage_interface(!1);
        var t = jQuery(this).attr("value");
        jQuery(this).is(":not(:checked)") ? (jQuery(".syllabplusmethod." + t).hide(), jQuery(".syllabplusmethod.none").fadeIn()) : (jQuery(".syllab_servicecheckbox").not(this).prop("checked", !1), "email" === t && set_email_report_storage_interface(!0))
    });
    var t, e = jQuery(".syllab_servicecheckbox");
     "function" == typeof e.labelauty && (e.labelauty(), t = jQuery("label[for=syllab_servicecheckbox_syllabvault]"), e = jQuery(''), t.append(e))
}

function syllab_remote_storage_test(t, a, e) {
    var n, e = e ? (n = jQuery("#syllab-" + t + "-test-" + e), ".syllabplusmethod." + t + "-" + e) : (n = jQuery("#syllab-" + t + "-test"), ".syllabplusmethod." + t),
        o = n.data("method_label");
    n.html(syllablion.testing_settings.replace("%s", o));
    var d = {
        method: t
    };
    jQuery("#syllab-navtab-settings-content " + e + " input[data-syllab_settings_test], #syllab-navtab-settings-content .expertmode input[data-syllab_settings_test]").each(function(t, e) {
        var a, r = jQuery(e).data("syllab_settings_test"),
            n = jQuery(e).attr("type");
        r && (n || (console.log("SyllabPlus: settings test input item with no type found"), console.log(e), n = "text"), a = null, "checkbox" == n ? a = jQuery(e).is(":checked") ? 1 : 0 : "text" == n || "password" == n || "hidden" == n ? a = jQuery(e).val() : (console.log("SyllabPlus: settings test input item with unrecognised type (" + n + ") found"), console.log(e)), d[r] = a)
    }), jQuery("#syllab-navtab-settings-content " + e + " textarea[data-syllab_settings_test], #syllab-navtab-settings-content " + e + " select[data-syllab_settings_test]").each(function(t, e) {
        var a = jQuery(e).data("syllab_settings_test");
        d[a] = jQuery(e).val()
    }), syllab_send_command("test_storage_settings", d, function(t, e) {
        n.html(syllablion.test_settings.replace("%s", o)), void 0 !== (a = void 0 !== a && 0 != a ? a.call(this, t, e, d) : a) && !1 === a && (alert(syllablion.settings_test_result.replace("%s", o) + " " + t.output), t.hasOwnProperty("data") && console.log(t.data))
    }, {
        error_callback: function(t, e, a, r) {
            n.html(syllablion.test_settings.replace("%s", o)), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
        }
    })
}

function backupnow_whichfiles_checked(a) {
    return jQuery('#backupnow_includefiles_moreoptions input[type="checkbox"]').each(function(t) {
        var e;
        !jQuery(this).is(":checked") || "syllab_include_" == (e = jQuery(this).attr("name")).substring(0, 15) && (e = e.substring(15), "" != a && (a += ","), a += e)
    }), a
}   

function backupnow_whichtables_checked(t) {
    var e = !1;
    return jQuery("#backupnow_database_moreoptions .syllab_db_entity").each(function(t) {
        (!jQuery(this).is(":checked") || jQuery(this).is(":checked") && jQuery(this).data("non_wp_table")) && (e = !0)
    }), t = jQuery("input[name^='syllab_include_tables_']").serializeArray(), !e || t
}

function syllab_deleteallselected() {
    var a = "",
        r = "",
        n = 0;
    jQuery("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row.backuprowselected").each(function(t) {
        0;
        var e = jQuery(this).data("nonce");
        r && (r += ","), r += e;
        e = jQuery(this).data("key");
        a && (a += ","), a += e, jQuery(this).find(".syllabplus-remove").data("hasremote") && n++
    }), syllab_delete(a, r, n)
}

function syllab_open_main_tab(e) {
    syllablion.main_tabs_keys.forEach(function(t) {
        e == t ? (jQuery("#syllab-navtab-" + t + "-content").show(), jQuery("#syllab-navtab-" + t).addClass("nav-tab-active")) : (jQuery("#syllab-navtab-" + t + "-content").hide(), jQuery("#syllab-navtab-" + t).removeClass("nav-tab-active")), syllab_console_focussed_tab = e
    })
}

function syllab_openrestorepanel(t) {
    syllab_historytimertoggle(t), syllab_open_main_tab("backups")
}

function syllab_delete_old_dirs() {
    return !0
}

function syllab_initiate_restore(t) {
    jQuery('#syllab-navtab-backups-content .syllab_existing_backups button[data-backup_timestamp="' + t + '"]').trigger("click")
}

function syllab_restore_setoptions(n) {
    jQuery('input[name="syllab_restore[]"]').each(function(t, e) {
        var a = jQuery(e).val(),
            r = new RegExp(a + "=([0-9,]+)"),
            r = n.match(r);
        r ? (jQuery(e).prop("disabled", !1).data("howmany", r[1]).parent().show(), "db" == a && 0, jQuery(e).is(":checked") && jQuery("#syllab_restorer_" + a + "options").show()) : jQuery(e).attr("disabled", "disabled").parent().hide()
    }), n.match(/dbcrypted=1/) ? (jQuery("#syllab_restore_db").data("encrypted", 1), jQuery(".syllab_restore_crypteddb").show()) : (jQuery("#syllab_restore_db").data("encrypted", 0), jQuery(".syllab_restore_crypteddb").hide()), jQuery("#syllab_restore_db").trigger("change");
    var t = n.match(/meta_foreign=([12])/);
    t ? jQuery("#syllab_restore_meta_foreign").val(t[1]) : jQuery("#syllab_restore_meta_foreign").val("0")
}

function syllab_backup_dialog_open(t) {
    t = void 0 === t ? "new" : t, 0 == jQuery("#syllabplus_incremental_backup_link").data("incremental") && "incremental" == t ? (jQuery("#syllab-backupnow-modal .incremental-free-only").show(), t = "new") : jQuery("#syllab-backupnow-modal .incremental-backups-only, #syllab-backupnow-modal .incremental-free-only").hide(), jQuery("#backupnow_includefiles_moreoptions").hide(), syllab_settings_form_changed && !window.confirm(syllablion.unsavedsettingsbackup) || (jQuery("#backupnow_label").val(""), "incremental" == t ? (update_file_entities_checkboxes(!0, impossible_increment_entities), jQuery("#backupnow_includedb").prop("checked", !1), jQuery("#backupnow_includefiles").prop("checked", !0), jQuery("#backupnow_includefiles_label").text(syllablion.files_incremental_backup), jQuery("#syllab-backupnow-modal .new-backups-only").hide(), jQuery("#syllab-backupnow-modal .incremental-backups-only").show()) : (update_file_entities_checkboxes(!1, impossible_increment_entities), jQuery("#backupnow_includedb").prop("checked", !0), jQuery("#backupnow_includefiles_label").text(syllablion.files_new_backup), jQuery("#syllab-backupnow-modal .new-backups-only").show(), jQuery("#syllab-backupnow-modal .incremental-backups-only").hide()), jQuery("#syllab-backupnow-modal").data("backup-type", t), jQuery("#syllab-backupnow-modal").dialog("open"))
}

function update_file_entities_checkboxes(t, e) {
    t ? jQuery(e).each(function(t, e) {
        jQuery("#backupnow_files_syllab_include_" + e).prop("checked", !1), jQuery("#backupnow_files_syllab_include_" + e).prop("disabled", !0)
    }) : jQuery('#backupnow_includefiles_moreoptions input[type="checkbox"]').each(function(t) {
        var e = jQuery(this).attr("name");
        "syllab_include_" == e.substring(0, 16) && (e = e.substring(16), jQuery("#backupnow_files_syllab_include_" + e).prop("disabled", !1), jQuery("#syllab_include_" + e).is(":checked") && jQuery("#backupnow_files_syllab_include_" + e).prop("checked", !0))
    })
}
var impossible_increment_entities, onlythesefileentities = backupnow_whichfiles_checked("");
"" == onlythesefileentities ? jQuery("#backupnow_includefiles_moreoptions").show() : jQuery("#backupnow_includefiles_moreoptions").hide();
var syllab_poplog_log_nonce, syllab_restore_stage = 1,
    lastlog_lastmessage = "",
    lastlog_lastdata = "",
    lastlog_jobs = "",
    syllab_activejobs_nextupdate = (new Date).getTime() + 1e3,
    syllab_page_is_visible = 1,
    syllab_console_focussed_tab = syllablion.tab,
    php_max_input_vars = 0,
    skipped_db_scan = 0,
    syllab_settings_form_changed = !1;

function syllab_check_page_visibility(t) {
    "hidden" == document.visibilityState ? syllab_page_is_visible = 0 : (syllab_page_is_visible = 1) !== t && jQuery("#syllab-navtab-backups-content").length && syllab_activejobs_update(!0)
}
window.onbeforeunload = function(t) {
    if (syllab_settings_form_changed) return syllablion.unsavedsettings
}, void 0 !== document.hidden && document.addEventListener("visibilitychange", function() {
    syllab_check_page_visibility(0)
}, !1), syllab_check_page_visibility(1);
var syllab_activejobs_update_timer, temporary_clone_timeout, syllab_poplog_log_pointer = 0,
    syllab_poplog_lastscroll = -1,
    syllab_last_forced_jobid = -1,
    syllab_last_forced_resumption = -1,
    syllab_last_forced_when = -1,
    syllab_backupnow_nonce = "",
    syllab_activejobslist_backupnownonce_only = 0,
    syllab_inpage_hasbegun = 0,
    syllab_aborted_jobs = [],
    syllab_clone_jobs = [],
    syllab_backups_selection = {};

function setup_migrate_tabs() {
    jQuery("#syllab_migrate .syllab_migrate_widget_module_content").each(function(t, e) {
        var a = jQuery(e).find("h3").first().html(),
            r = jQuery(".syllab_migrate_intro");
        jQuery('<button class="button button-primary button-hero" />').html(a).appendTo(r).on("click", function(t) {
            t.preventDefault(), jQuery(e).show(), r.hide()
        })
    })
}

function syllab_backupnow_inpage_go(t, e, a, r, n, o, d) {
    r = void 0 === r ? 0 : r, n = void 0 === n ? 0 : n, o = void 0 === o ? 0 : o, d = void 0 === d ? syllablion.automaticbackupbeforeupdate : d, syllab_console_focussed_tab = "backups", syllab_inpage_success_callback = t, syllab_activejobs_update_timer = setInterval(function() {
        syllab_activejobs_update(!1)
    }, 1250);
    t = jQuery("#syllab-backupnow-inpage-modal").length;
    t && jQuery("#syllab-backupnow-inpage-modal").dialog("option", "buttons", {}), jQuery("#syllab_inpage_prebackup").hide(), t && jQuery("#syllab-backupnow-inpage-modal").dialog("open"), jQuery("#syllab_inpage_backup").show(), syllab_activejobslist_backupnownonce_only = 1, syllab_inpage_hasbegun = 0, syllab_backupnow_go(r, n, o, e, a, d, "")
}

function syllab_get_downloaders() {
    var a = "";
    return jQuery(".ud_downloadstatus .syllabplus_downloader, #ud_downloadstatus2 .syllabplus_downloader, #ud_downloadstatus3 .syllabplus_downloader").each(function(t, e) {
        e = jQuery(e).data("downloaderfor");
        "object" == typeof e && ("" != a && (a += ":"), a = a + e.base + "," + e.nonce + "," + e.what + "," + e.index)
    }), a
}

function syllab_poll_get_parameters() {
    var t = {
        downloaders: syllab_get_downloaders()
    };
    try {
        jQuery("#syllab-poplog").dialog("isOpen") && (t.log_fetch = 1, t.log_nonce = syllab_poplog_log_nonce, t.log_pointer = syllab_poplog_log_pointer)
    } catch (t) {
        console.log(t)
    }
    return syllab_activejobslist_backupnownonce_only && void 0 !== syllab_backupnow_nonce && "" != syllab_backupnow_nonce && (t.thisjobonly = syllab_backupnow_nonce), 0 !== jQuery("#syllabplus_ajax_restore_job_id").length && (t.syllab_credentialtest_nonce = syllab_credentialtest_nonce), t
}! function(r) {
    syllab_backups_selection.toggle = function(t) {
        r(t).is(".backuprowselected") ? this.deselect(t) : this.select(t)
    }, syllab_backups_selection.select = function(t) {
        r(t).addClass("backuprowselected"), r(t).find(".backup-select input").prop("checked", !0), this.checkSelectionStatus()
    }, syllab_backups_selection.deselect = function(t) {
        r(t).removeClass("backuprowselected"), r(t).find(".backup-select input").prop("checked", !1), this.checkSelectionStatus()
    }, syllab_backups_selection.selectAll = function() {
        r("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").each(function(t, e) {
            syllab_backups_selection.select(e)
        })
    }, syllab_backups_selection.deselectAll = function() {
        r("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").each(function(t, e) {
            syllab_backups_selection.deselect(e)
        })
    }, syllab_backups_selection.checkSelectionStatus = function() {
        var t = r("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").length,
            e = r("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row.backuprowselected").length;
        0 < e ? (r("#ud_massactions").addClass("active"), r(".js--deselect-all-backups, .js--delete-selected-backups").prop("disabled", !1)) : (r("#ud_massactions").removeClass("active"), r(".js--deselect-all-backups, .js--delete-selected-backups").prop("disabled", !0)), t === e ? r("#cb-select-all").prop("checked", !0) : r("#cb-select-all").prop("checked", !1), t ? r("#ud_massactions").show() : r("#ud_massactions").hide()
    }, syllab_backups_selection.selectAllInBetween = function(t) {
        var e = this.firstMultipleSelectionIndex,
            a = t.rowIndex - 1;
        for (this.firstMultipleSelectionIndex > t.rowIndex - 1 && (e = t.rowIndex - 1, a = this.firstMultipleSelectionIndex), i = e; i <= a; i++) this.select(r("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").eq(i))
    }, syllab_backups_selection.hightlight_backup_rows = function() {
        void 0 !== syllab_backups_selection.firstMultipleSelectionIndex && (r(this).hasClass("range-selection") || r(this).hasClass("backuprowselected") || r(this).addClass("range-selection"), r(this).siblings().removeClass("range-selection"), syllab_backups_selection.firstMultipleSelectionIndex + 1 > this.rowIndex ? r(this).nextUntil(".syllab_existing_backups_row.range-selection-start").addClass("range-selection") : syllab_backups_selection.firstMultipleSelectionIndex + 1 < this.rowIndex && r(this).prevUntil(".syllab_existing_backups_row.range-selection-start").addClass("range-selection"))
    }, syllab_backups_selection.unregister_highlight_mode = function() {
        void 0 !== syllab_backups_selection.firstMultipleSelectionIndex && (delete syllab_backups_selection.firstMultipleSelectionIndex, r("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").removeClass("range-selection range-selection-start"), r("#syllab-navtab-backups-content").off("mouseenter", ".syllab_existing_backups .syllab_existing_backups_row", this.hightlight_backup_rows), r("#syllab-navtab-backups-content").off("mouseleave", ".syllab_existing_backups .syllab_existing_backups_row", this.hightlight_backup_rows), r(document).off("mouseleave", this.unregister_highlight_mode))
    }, syllab_backups_selection.register_highlight_mode = function() {
        r(document).on("mouseleave", syllab_backups_selection.unregister_highlight_mode), r("#syllab-navtab-backups-content").on("mouseenter", ".syllab_existing_backups .syllab_existing_backups_row", syllab_backups_selection.hightlight_backup_rows), r("#syllab-navtab-backups-content").on("mouseleave", ".syllab_existing_backups .syllab_existing_backups_row", syllab_backups_selection.hightlight_backup_rows)
    }
}(jQuery);
var syllabplus_activejobs_list_fatal_error_alert = !0;

function syllab_activejobs_update(t) {
    jQuery;
    var r, e = (new Date).getTime();
    0 == t && e < syllab_activejobs_nextupdate || (syllab_activejobs_nextupdate = e + 5500, syllab_send_command("activejobs_list", r = syllab_poll_get_parameters(), function(t, e, a) {
        syllab_process_status_check(t, a, r)
    }, {
        type: "GET",
        error_callback: function(t, e, a, r) {
            return void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), !0 === syllabplus_activejobs_list_fatal_error_alert && (syllabplus_activejobs_list_fatal_error_alert = !1, alert(this.alert_done + " " + r.fatal_error_message))) : (e = e == a ? a : a + " (" + e + ")", console.error(e), console.log(t)), !1
        }
    }))
}

function syllab_show_success_modal(t) {
    "string" == typeof t && (t = {
        message: t
    });
    t = jQuery.extend({
        icon: "yes",
        close: syllablion.close,
        message: "",
        classes: "success"
    }, t);
    jQuery.blockUI({
        css: {
            width: "300px",
            border: "none",
            "border-radius": "10px",
            left: "calc(50% - 150px)"
        },
        message: '<div class="syllab_success_popup ' + t.classes + '"><span class="dashicons dashicons-' + t.icon + '"></span><div class="syllab_success_popup--message">' + t.message + '</div><button class="button syllab-close-overlay"><span class="dashicons dashicons-no-alt"></span>' + t.close + "</button></div>"
    }), setTimeout(jQuery.unblockUI, 5e3), jQuery(".blockUI .syllab-close-overlay").on("click", function() {
        jQuery.unblockUI()
    })
}

function syllab_popuplog(t) {
    var e = syllablion.loading_log_file;
    t && (e += " (log." + t + ".txt)"), jQuery("#syllab-poplog").dialog("option", "title", e), jQuery("#syllab-poplog-content").html("<em>" + e + " ...</em> "), jQuery("#syllab-poplog").dialog("open"), syllab_send_command("get_log", t, function(t) {
        syllab_poplog_log_pointer = t.pointer, syllab_poplog_log_nonce = t.nonce;
        var e = "?page=syllabplus&action=downloadlog&force_download=1&syllabplus_backup_nonce=" + t.nonce;
        jQuery("#syllab-poplog-content").html(t.log);
        var a = {};
        a[syllablion.downloadlogfile] = function() {
            window.location.href = e
        }, a[syllablion.close] = function() {
            jQuery(this).dialog("close")
        }, jQuery("#syllab-poplog").dialog("option", "buttons", a), jQuery("#syllab-poplog").dialog("option", "title", "log." + t.nonce + ".txt"), syllab_poplog_lastscroll = -1
    }, {
        type: "GET",
        timeout: 6e4,
        error_callback: function(t, e, a, r) {
            void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), jQuery("#syllab-poplog-content").append(r.fatal_error_message)) : (e = e == a ? a : a + " (" + e + ")", jQuery("#syllab-poplog-content").append(e), console.log(t))
        }
    })
}

function syllab_showlastbackup() {
    syllab_send_command("get_fragment", "last_backup_html", function(t) {
        response = t.output, lastbackup_laststatus == response ? setTimeout(function() {
            syllab_showlastbackup()
        }, 7e3) : jQuery("#syllab_last_backup").html(response), lastbackup_laststatus = response
    }, {
        type: "GET"
    })
}
var syllab_historytimer = 0,
    calculated_diskspace = 0,
    syllab_historytimer_notbefore = 0,
    syllab_history_lastchecksum = !1;

function syllab_historytimertoggle(t) {
    syllab_historytimer && 1 != t ? (clearTimeout(syllab_historytimer), syllab_historytimer = 0) : (syllab_updatehistory(0, 0), syllab_historytimer = setInterval(function() {
        syllab_updatehistory(0, 0)
    }, 3e4), calculated_diskspace || (syllabplus_diskspace(), calculated_diskspace = 1))
}

function syllab_updatehistory(t, e, a, r) {
    if ("undefined" == typeof syllab_restore_screen || !syllab_restore_screen) {
        void 0 === a && (a = jQuery("#syllab_debug_mode").is(":checked") ? 1 : 0);
        var n = Math.round((new Date).getTime() / 1e3);
        if (1 == t || 1 == e) syllab_historytimer_notbefore = n + 30;
        else if (n < syllab_historytimer_notbefore && void 0 === r) return void console.log("Update history skipped: " + n.toString() + " < " + syllab_historytimer_notbefore.toString());
        void 0 === r && (r = jQuery("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").length), 1 == t && (1 == e ? (syllab_history_lastchecksum = !1, jQuery("#syllab-navtab-backups-content .syllab_existing_backups").html('<p style="text-align:center;"><em>' + syllablion.rescanningremote + "</em></p>")) : (syllab_history_lastchecksum = !1, jQuery("#syllab-navtab-backups-content .syllab_existing_backups").html('<p style="text-align:center;"><em>' + syllablion.rescanning + "</em></p>"))), syllab_send_command("rescan", {
            operation: e ? "remotescan" : !!t && "rescan",
            debug: a,
            backup_count: r
        }, function(t) {
            if (t.hasOwnProperty("logs_exist") && t.logs_exist && jQuery("#syllab_lastlogmessagerow .syllab-log-link").show(), t.hasOwnProperty("migrate_tab") && t.migrate_tab && (jQuery("#syllab-navtab-migrate").hasClass("nav-tab-active") || (jQuery("#syllab_migrate_tab_alt").html(""), jQuery("#syllab_migrate").replaceWith(jQuery(t.migrate_tab).find("#syllab_migrate")), setup_migrate_tabs())), t.hasOwnProperty("web_server_disk_space") && ("" == t.web_server_disk_space ? (console.log("SyllabPlus: web_server_disk_space is empty"), jQuery("#syllab-navtab-backups-content .syllab-server-disk-space").length && jQuery("#syllab-navtab-backups-content .syllab-server-disk-space").slideUp("slow", function() {
                    jQuery(this).remove()
                })) : jQuery("#syllab-navtab-backups-content .syllab-server-disk-space").length ? jQuery("#syllab-navtab-backups-content  .syllab-server-disk-space").replaceWith(t.web_server_disk_space) : jQuery("#syllab-navtab-backups-content .syllab-disk-space-actions").prepend(t.web_server_disk_space)), update_backupnow_modal(t), t.hasOwnProperty("backupnow_file_entities") && (impossible_increment_entities = t.backupnow_file_entities), null != t.n && jQuery("#syllab-existing-backups-heading").html(t.n), null != t.t) {
                if (null != t.cksum) {
                    if (t.cksum == syllab_history_lastchecksum) return;
                    syllab_history_lastchecksum = t.cksum
                }
                jQuery("#syllab-navtab-backups-content .syllab_existing_backups").html(t.t), syllab_backups_selection.checkSelectionStatus(), t.data && console.log(t.data)
            }
        })
    }
}

function update_backupnow_modal(t) {
    t.hasOwnProperty("modal_afterfileoptions") && jQuery(".backupnow_modal_afterfileoptions").html(t.modal_afterfileoptions)
}

function syllab_exclude_entity_update(t) {
    var e = [];
    jQuery("#syllab_include_" + t + "_exclude_container .syllab_exclude_entity_wrapper .syllab_exclude_entity_field").each(function() {
        var t = jQuery(this).data("val").toString().trim();
        "" != t && e.push(t)
    }), jQuery("#syllab_include_" + t + "_exclude").val(e.join(","))
}

function syllab_is_unique_exclude_rule(t, e) {
    return existing_exclude_rules_str = jQuery("#syllab_include_" + e + "_exclude").val(), existing_exclude_rules = existing_exclude_rules_str.split(","), !(-1 < jQuery.inArray(t, existing_exclude_rules)) || (alert(syllablion.duplicate_exclude_rule_error_msg), !1)
}
var syllab_interval_week_val = !1,
    syllab_interval_month_val = !1;

function syllab_intervals_monthly_or_not(t, e) {
    var a, r = "#syllab-navtab-settings-content #" + t,
        n = "monthly" == e,
        o = !1;
    10 < jQuery(r + " option").length && (o = !0), (n || o) && (n && o ? "monthly" == e && (jQuery(".syllab_monthly_extra_words_" + t).remove(), jQuery(r).before('<span class="syllab_monthly_extra_words_' + t + '">' + syllablion.day + " </span>").after('<span class="syllab_monthly_extra_words_' + t + '"> ' + syllablion.inthemonth + " </span>")) : (jQuery(".syllab_monthly_extra_words_" + t).remove(), n ? (syllab_interval_week_val = jQuery(r + " option:selected").val(), jQuery(r).html(syllablion.mdayselector).before('<span class="syllab_monthly_extra_words_' + t + '">' + syllablion.day + " </span>").after('<span class="syllab_monthly_extra_words_' + t + '"> ' + syllablion.inthemonth + " </span>"), a = !1 === syllab_interval_month_val ? 1 : syllab_interval_month_val, a -= 1, jQuery(r + " option").eq(a).prop("selected", !0)) : (syllab_interval_month_val = jQuery(r + " option:selected").val(), jQuery(r).html(syllablion.dayselector), a = !1 === syllab_interval_week_val ? 1 : syllab_interval_week_val, jQuery(r + " option").eq(a).prop("selected", !0))))
}

function syllab_check_same_times() {
    var t = 0,
        e = jQuery("#syllab-navtab-settings-content .syllab_interval").val();
    "manual" == e ? jQuery("#syllab-navtab-settings-content .syllab_files_timings").hide() : jQuery("#syllab-navtab-settings-content .syllab_files_timings").show(), "weekly" == e || "fortnightly" == e || "monthly" == e ? (syllab_intervals_monthly_or_not("syllab_startday_files", e), jQuery("#syllab-navtab-settings-content #syllab_startday_files").show()) : (jQuery(".syllab_monthly_extra_words_syllab_startday_files").remove(), jQuery("#syllab-navtab-settings-content #syllab_startday_files").hide());
    var a = jQuery("#syllab-navtab-settings-content .syllab_interval_database").val();
    "manual" == a && (t = 1, jQuery("#syllab-navtab-settings-content .syllab_db_timings").hide()), "weekly" == a || "fortnightly" == a || "monthly" == a ? (syllab_intervals_monthly_or_not("syllab_startday_db", a), jQuery("#syllab-navtab-settings-content #syllab_startday_db").show()) : (jQuery(".syllab_monthly_extra_words_syllab_startday_db").remove(), jQuery("#syllab-navtab-settings-content #syllab_startday_db").hide()), a == e ? (jQuery("#syllab-navtab-settings-content .syllab_db_timings").hide(), 0 == t ? jQuery("#syllab-navtab-settings-content .syllab_same_schedules_message").show() : jQuery("#syllab-navtab-settings-content .syllab_same_schedules_message").hide()) : (jQuery("#syllab-navtab-settings-content .syllab_same_schedules_message").hide(), 0 == t && jQuery("#syllab-navtab-settings-content .syllab_db_timings").show())
}

function syllab_activejobs_delete(a) {
    syllab_aborted_jobs[a] = 1, jQuery("#syllab-jobid-" + a).closest(".syllab_row").addClass("deleting"), syllab_send_command("activejobs_delete", a, function(t) {
        var e = jQuery("#syllab-jobid-" + a).closest(".syllab_row");
        e.addClass("deleting"), "Y" == t.ok ? (jQuery("#syllab-jobid-" + a).html(t.m), e.remove(), jQuery("#syllab-backupnow-inpage-modal").dialog("isOpen") && jQuery("#syllab-backupnow-inpage-modal").dialog("close"), syllab_show_success_modal({
            message: syllab_active_job_is_clone(a) ? syllablion.clone_backup_aborted : syllablion.backup_aborted,
            icon: "no-alt",
            classes: "warning"
        })) : "N" == t.ok ? (e.removeClass("deleting"), alert(t.m)) : (e.removeClass("deleting"), alert(syllablion.unexpectedresponse), console.log(t))
    })
}

function syllabplus_diskspace_entity(e) {
    jQuery("#syllab_diskspaceused_" + e).html("<em>" + syllablion.calculating + "</em>"), syllab_send_command("get_fragment", {
        fragment: "disk_usage",
        data: e
    }, function(t) {
        jQuery("#syllab_diskspaceused_" + e).html(t.output)
    }, {
        type: "GET"
    })
}

function syllab_active_job_is_clone(e) {
    return syllab_clone_jobs.filter(function(t) {
        return t == e
    }).length
}

function syllab_iframe_modal(t, e) {
    jQuery("#syllab-iframe-modal-innards").html('<iframe width="100%" height="430px" src="' + ajaxurl + "?action=syllab_ajax&subaction=" + t + "&nonce=" + syllab_credentialtest_nonce + '"></iframe>'), jQuery("#syllab-iframe-modal").dialog({
        title: e,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            jQuery(this).dialog("option", "width", 780), jQuery(this).dialog("option", "minHeight", 260), 500 < jQuery(window).height() ? jQuery(this).dialog("option", "height", 500) : jQuery(this).dialog("option", "height", jQuery(window).height() - 30)
        }
    }).dialog("open")
}

function syllab_html_modal(t, e, a, r) {
    jQuery("#syllab-iframe-modal-innards").html(t);
    t = {};
    a < 450 && (t[syllablion.close] = function() {
        jQuery(this).dialog("close")
    }), jQuery("#syllab-iframe-modal").dialog({
        title: e,
        buttons: t,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            jQuery(this).dialog("option", "width", a), jQuery(this).dialog("option", "minHeight", 260), jQuery(window).height() > r ? jQuery(this).dialog("option", "height", r) : jQuery(this).dialog("option", "height", jQuery(window).height() - 30)
        }
    }).dialog("open")
}

function syllabplus_diskspace() {
    jQuery("#syllab-navtab-backups-content .syllab_diskspaceused").html("<em>" + syllablion.calculating + "</em>"), syllab_send_command("get_fragment", {
        fragment: "disk_usage",
        data: "syllab"
    }, function(t) {
        jQuery("#syllab-navtab-backups-content .syllab_diskspaceused").html(t.output)
    }, {
        type: "GET"
    })
}
"undefined" != typeof syllab_siteurl && setInterval(function() {
    jQuery.get(syllab_siteurl + "/wp-cron.php")
}, 21e4);
lastlog_lastmessage = "";

function syllabplus_deletefromserver(t, e, a) {
    syllab_send_command("syllab_download_backup", {
        stage: "delete",
        timestamp: t,
        type: e,
        findex: a = a || 0
    }, null, {
        action: "syllab_download_backup",
        nonce: syllab_download_nonce,
        nonce_key: "_wpnonce"
    })
}

function syllabplus_downloadstage2(t, e, a) {
    location.href = ajaxurl + "?_wpnonce=" + syllab_download_nonce + "&timestamp=" + t + "&type=" + e + "&stage=2&findex=" + a + "&action=syllab_download_backup"
}

function syllabplus_show_contents(t, e, a) {
    syllab_html_modal('<div id="syllab_zip_files_container" class="hidden-in-syllabcentral" style="clear:left;"><div id="syllab_zip_info_container" class="syllab_jstree_info_container"><p><span id="syllab_zip_path_text">' + syllablion.zip_file_contents_info + '</span> - <span id="syllab_zip_size_text"></span></p>' + syllablion.browse_download_link + '</div><div id="syllab_zip_files_jstree_container"><input type="search" id="zip_files_jstree_search" name="zip_files_jstree_search" placeholder="' + syllablion.search + '"><div id="syllab_zip_files_jstree" class="syllab_jstree"></div></div></div>', syllablion.zip_file_contents, 780, 500), zip_files_jstree("zipbrowser", t, e, a)
}

function zip_files_jstree(a, r, n, o) {
    jQuery("#syllab_zip_files_jstree").jstree({
        core: {
            multiple: !1,
            data: function(t, e) {
                syllab_send_command("get_jstree_directory_nodes", {
                    entity: a,
                    node: t,
                    timestamp: r,
                    type: n,
                    findex: o
                }, function(t) {
                    t.hasOwnProperty("error") ? alert(t.error) : e.call(this, t.nodes)
                }, {
                    error_callback: function(t, e, a, r) {
                        void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), jQuery("#syllab_zip_files_jstree").html('<p style="color:red; margin: 5px;">' + r.fatal_error_message + "</p>"), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", jQuery("#syllab_zip_files_jstree").html('<p style="color:red; margin: 5px;">' + a + "</p>"), console.log(a), alert(a), console.log(t))
                    }
                })
            },
            error: function(t) {
                alert(t), console.log(t)
            }
        },
        search: {
            show_only_matches: !0
        },
        plugins: ["search", "sort"]
    }), jQuery("#syllab_zip_files_jstree").on("ready.jstree", function(t, e) {
        jQuery("#syllab-iframe-modal").dialog("option", "title", syllablion.zip_file_contents + ": " + e.instance.get_node("#").children[0])
    });
    var t = !1;
    jQuery("#zip_files_jstree_search").on("keyup", function() {
        t && clearTimeout(t), t = setTimeout(function() {
            var t = jQuery("#zip_files_jstree_search").val();
            jQuery("#syllab_zip_files_jstree").jstree(!0).search(t)
        }, 250)
    }), jQuery("#syllab_zip_files_jstree").on("changed.jstree", function(t, e) {
        jQuery("#syllab_zip_path_text").text(e.node.li_attr.path), e.node.li_attr.size ? (jQuery("#syllab_zip_size_text").text(e.node.li_attr.size), jQuery("#syllab_zip_download_item").show()) : (jQuery("#syllab_zip_size_text").text(""), jQuery("#syllab_zip_download_item").hide())
    }), jQuery("#syllab_zip_download_item").on("click", function(t) {
        t.preventDefault(), syllab_send_command("get_zipfile_download", {
            path: jQuery("#syllab_zip_path_text").text(),
            timestamp: r,
            type: n,
            findex: o
        }, function(t) {
            t.hasOwnProperty("error") ? alert(t.error) : t.hasOwnProperty("path") ? location.href = ajaxurl + "?_wpnonce=" + syllab_download_nonce + "&timestamp=" + r + "&type=" + n + "&stage=2&findex=" + o + "&filepath=" + t.path + "&action=syllab_download_backup" : alert(syllablion.download_timeout)
        }, {
            error_callback: function(t, e, a, r) {
                void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
            }
        })
    })
}

function remove_syllab_downloader(t, e) {
    jQuery(t).closest(".syllabplus_downloader").fadeOut().remove(), 0 == jQuery(".syllabplus_downloader_container_" + e + " .syllabplus_downloader").length && jQuery(".syllabplus_downloader_container_" + e).remove()
}

function syllab_downloader(t, e, a, r, n, o, d) {
    "string" != typeof n && (n = n.toString()), jQuery(".ud_downloadstatus").show();
    var n = n.split(","),
        u = o || e,
        o = jQuery("#syllab-navtab-backups-content .uddownloadform_" + a + "_" + e + "_" + n[0]).data("wp_nonce").toString();
    jQuery(".syllabplus_downloader_container_" + a).length || (jQuery(r).append('<div class="syllabplus_downloader_container_' + a + ' postbox"></div>'), jQuery(".syllabplus_downloader_container_" + a).append('<strong style="clear:left; padding: 8px; margin-top: 4px;">' + syllablion.download + " " + a + " (" + u + "):</strong>"));
    for (var i = 0; i < n.length; i++) {
        var s = t + e + "_" + a + "_" + n[i],
            p = "." + s,
            l = parseInt(n[i]);
        l++;
        l = 0 == n[i] ? "" : " (" + l + ")";
        jQuery(p).length || (jQuery(".syllabplus_downloader_container_" + a).append('<div style="clear:left; padding: 8px; margin-top: 4px;" class="' + s + ' syllabplus_downloader"><button onclick="remove_syllab_downloader(this, \'' + a + '\');" type="button" style="float:right; margin-bottom: 8px;" class="ud_downloadstatus__close" aria-label="Close"><span class="dashicons dashicons-no-alt"></span></button><strong>' + a + l + '</strong>:<div class="raw">' + syllablion.begunlooking + '</div><div class="file ' + s + '_st"><div class="dlfileprogress" style="width: 0;"></div></div></div>'), jQuery(p).data("downloaderfor", {
            base: t,
            nonce: e,
            what: a,
            index: n[i]
        }), setTimeout(function() {
            syllab_activejobs_update(!0)
        }, 1500)), jQuery(p).data("lasttimebegan", (new Date).getTime())
    }
    return syllab_send_command("syllab_download_backup", {
        type: a,
        timestamp: e,
        findex: n
    }, function(t) {}, {
        action: "syllab_download_backup",
        nonce_key: "_wpnonce",
        nonce: o,
        timeout: 1e4,
        async: d = !!d
    }), !1
}

function ud_parse_json(e, a) {
    if (!(a = void 0 !== a)) try {
        return JSON.parse(e)
    } catch (t) {
        console.log("SyllabPlus: Exception when trying to parse JSON (1) - will attempt to fix/re-parse based upon first/last curly brackets"), console.log(e)
    }
    var r = e.indexOf("{"),
        n = e.lastIndexOf("}");
    if (-1 < r && -1 < n) {
        var t = e.slice(r, n + 1);
        try {
            var o = JSON.parse(t);
            return a || console.log("SyllabPlus: JSON re-parse successful"), a ? {
                parsed: o,
                json_start_pos: r,
                json_last_pos: n + 1
            } : o
        } catch (t) {
            console.log("SyllabPlus: Exception when trying to parse JSON (2) - will attempt to fix/re-parse based upon bracket counting");
            for (var d = r, u = 0, i = "", s = !1;
                (0 < u || d == r) && d <= n;) {
                var p = e.charAt(d);
                s || "{" != p ? s || "}" != p ? '"' == p && "\\" != i && (s = !s) : u-- : u++, i = p, d++
            }
            console.log("Started at cursor=" + r + ", ended at cursor=" + d + " with result following:"), console.log(e.substring(r, d));
            try {
                o = JSON.parse(e.substring(r, d));
                return console.log("SyllabPlus: JSON re-parse successful"), a ? {
                    parsed: o,
                    json_start_pos: r,
                    json_last_pos: d
                } : o
            } catch (t) {
                throw t
            }
        }
    }
    throw "SyllabPlus: could not parse the JSON"
}

function syllab_restorer_checkstage2(t) {
    0 < jQuery("#ud_downloadstatus2 .file").length ? t && alert(syllablion.stilldownloading) : (jQuery(".syllab-restore--next-step").prop("disabled", !0), jQuery("#syllab-restore-modal-stage2a").html('<span class="dashicons dashicons-update rotate"></span> ' + syllablion.preparing_backup_files), syllab_send_command("restore_alldownloaded", {
        timestamp: jQuery("#syllab_restore_timestamp").val(),
        restoreopts: jQuery("#syllab_restore_form").serialize()
    }, function(e, t, a) {
        var r = null;
        jQuery("#syllab_restorer_restore_options").val(""), jQuery(".syllab-restore--next-step").prop("disabled", !1);
        try {
            if (null == e) return void jQuery("#syllab-restore-modal-stage2a").html(syllablion.emptyresponse);
            var n = e.m;
            if ("" != e.w && (n = n + '<div class="notice notice-warning"><p><span class="dashicons dashicons-warning"></span> <strong>' + syllablion.warnings + "</strong></p>" + e.w + "</div>"), "" != e.e ? n = n + '<div class="notice notice-error"><p><span class="dashicons dashicons-dismiss"></span> <strong>' + syllablion.errors + "</strong></p>" + e.e + "</div>" : syllab_restore_stage = 3, e.hasOwnProperty("i")) {
                try {
                    (r = ud_parse_json(e.i)).hasOwnProperty("addui") && (console.log("Further UI options are being displayed"), n += '<div id="syllab_restoreoptions_ui">' + r.addui + "</div>", "object" == typeof JSON && "function" == typeof JSON.stringify && (delete r.addui, e.i = JSON.stringify(r))), r.hasOwnProperty("php_max_input_vars") && (php_max_input_vars = parseInt(r.php_max_input_vars)), r.hasOwnProperty("skipped_db_scan") && (skipped_db_scan = parseInt(r.skipped_db_scan))
                } catch (t) {
                    console.log(t), console.log(e)
                }
                jQuery("#syllab_restorer_backup_info").val(e.i)
            } else jQuery("#syllab_restorer_backup_info").val();
            jQuery("#syllab-restore-modal-stage2a").html(n), jQuery(".syllab-restore--next-step").text(syllablion.restore), 0 < jQuery("#syllab-restore-modal-stage2a .syllab_select2").length && jQuery("#syllab-restore-modal-stage2a .syllab_select2").select2()
        } catch (t) {
            console.log(a), console.log(t), jQuery("#syllab-restore-modal-stage2a").text(syllablion.jsonnotunderstood + " " + syllablion.errordata + ": " + a).html()
        }
    }, {
        error_callback: function(t, e, a, r) {
            void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), jQuery("#syllab-restore-modal-stage2a").html('<p style="color: red;">' + r.fatal_error_message + "</p>"), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", jQuery("#syllab-restore-modal-stage2a").html('<p style="color: red;">' + a + "</p>"), console.log(a), alert(a), console.log(t))
        }
    }))
}

function syllab_downloader_status(t, e, a, r) {}

function syllab_downloader_status_update(t, o) {
    var d = 0;
    return jQuery(t).each(function(t, e) {
        var a, r, n;
        "" != e.base && (a = "." + (e.base + e.timestamp + "_" + e.what + "_" + e.findex), null != e.e ? (jQuery(a + " .raw").html("<strong>" + syllablion.error + "</strong> " + e.e), console.log(e)) : null != e.p ? (jQuery(a + "_st .dlfileprogress").width(e.p + "%"), null != e.a && 0 < e.a && (r = (new Date).getTime() - jQuery(a).data("lasttimebegan"), 90 < e.a && 6e4 < r && (console.log(e.timestamp + " " + e.what + " " + e.findex + ": restarting download: file_age=" + e.a + ", sincelastrestart_ms=" + r), jQuery(a).data("lasttimebegan", (new Date).getTime()), n = jQuery("#syllab-navtab-backups-content .uddownloadform_" + e.what + "_" + e.timestamp + "_" + e.findex), syllab_send_command("syllab_download_backup", {
            type: e.what,
            timestamp: e.timestamp,
            findex: e.findex
        }, function(t) {}, {
            action: "syllab_download_backup",
            nonce_key: "_wpnonce",
            nonce: n.data("wp_nonce").toString(),
            timeout: 1e4
        }), jQuery(a).data("lasttimebegan", (new Date).getTime()))), null != e.m && (100 <= e.p && "udrestoredlstatus_" == e.base ? (jQuery(a + " .raw").html(e.m), jQuery(a).fadeOut("slow", function() {
            remove_syllab_downloader(this, e.what), syllab_restorer_checkstage2(0)
        })) : 100 <= e.p && "udclonedlstatus_" == e.base ? (jQuery(a + " .raw").html(e.m), jQuery(a).fadeOut("slow", function() {
            remove_syllab_downloader(this, e.what)
        })) : e.p < 100 || "uddlstatus_" != e.base ? jQuery(a + " .raw").html(e.m) : (n = syllablion.fileready + " " + syllablion.actions + ': \t\t\t\t<button class="button" type="button" onclick="syllabplus_downloadstage2(\'' + e.timestamp + "', '" + e.what + "', '" + e.findex + "')\">" + syllablion.downloadtocomputer + '</button> \t\t\t\t<button class="button" id="uddownloaddelete_' + e.timestamp + "_" + e.what + '" type="button" onclick="syllabplus_deletefromserver(\'' + e.timestamp + "', '" + e.what + "', '" + e.findex + "')\">" + syllablion.deletefromserver + "</button>", e.hasOwnProperty("can_show_contents") && e.can_show_contents && (n += ' <button class="button" type="button" onclick="syllabplus_show_contents(\'' + e.timestamp + "', '" + e.what + "', '" + e.findex + "')\">" + syllablion.browse_contents + "</button>"), jQuery(a + " .raw").html(n), jQuery(a + "_st").remove()))) : null != e.m ? jQuery(a + " .raw").html(e.m) : (jQuery(a + " .raw").html(syllablion.jsonnotunderstood + " (" + o + ")"), d = 1))
    }), d
}

function syllab_backupnow_go(t, e, a, r, n, o, d, u) {
    var i, o = {
        backupnow_nodb: t,
        backupnow_nofiles: e,
        backupnow_nocloud: a,
        backupnow_label: o,
        extradata: n
    };
    "" != r && (o.onlythisfileentity = r), "" != d && (o.onlythesetableentities = d), "" != u && (o.only_these_cloud_services = u), o.always_keep = void 0 !== n.always_keep ? n.always_keep : 0, delete n.always_keep, o.incremental = void 0 !== n.incremental ? n.incremental : 0, delete n.incremental, o.db_anon_all = void 0 !== n.db_anon_all ? n.db_anon_all : 0, delete n.db_anon_all, o.db_anon_non_staff = void 0 !== n.db_anon_non_staff ? n.db_anon_non_staff : 0, delete n.db_anon_non_staff, jQuery(".syllab_requeststart").length || ((i = jQuery('<div class="syllab_requeststart" />').html('<span class="spinner"></span>' + syllablion.requeststart)).data("remove", !1), setTimeout(function() {
        i.data("remove", !0)
    }, 3e3), setTimeout(function() {
        i.remove()
    }, 75e3), jQuery("#syllab_activejobsrow").before(i)), syllab_activejobslist_backupnownonce_only = 1, syllab_send_command("backupnow", o, function(t) {
        return t.hasOwnProperty("error") ? (jQuery(".syllab_requeststart").remove(), void alert(t.error)) : (jQuery("#syllab_backup_started").html(t.m), t.hasOwnProperty("nonce") && (syllab_backupnow_nonce = t.nonce, console.log("SyllabPlus: ID of started job: " + syllab_backupnow_nonce)), void setTimeout(function() {
            syllab_activejobs_update(!0)
        }, 500))
    })
}

function syllab_process_status_check(t, e, a) {
    if (t.hasOwnProperty("fatal_error")) return console.error(t.fatal_error_message), void(!0 === syllabplus_activejobs_list_fatal_error_alert && (syllabplus_activejobs_list_fatal_error_alert = !1, alert(this.alert_done + " " + t.fatal_error_message)));
    try {
        t.hasOwnProperty("l") && (t.l ? (jQuery("#syllab_lastlogmessagerow").show(), jQuery("#syllab_lastlogcontainer").html(t.l)) : (jQuery("#syllab_lastlogmessagerow").hide(), jQuery("#syllab_lastlogcontainer").html("(" + syllablion.nothing_yet_logged + ")"))), syllablion.hasOwnProperty("hosting_restriction") && syllablion.hosting_restriction instanceof Array && (syllablion.hosting_restriction.length = 0, t.hasOwnProperty("hosting_restriction") && (t.hosting_restriction && t.hosting_restriction.includes("only_one_backup_per_month") && syllablion.hosting_restriction.push("only_one_backup_per_month"), t.hosting_restriction && t.hosting_restriction.includes("only_one_incremental_per_day") && syllablion.hosting_restriction.push("only_one_incremental_per_day"))), jQuery("#syllab-wrap #syllab-navtab-settings-content").is(":hidden") || t.hasOwnProperty("automatic_updates") && jQuery('input[name="syllab_auto_updates"]').prop("checked", t.automatic_updates);
        var o = -1,
            r = jQuery(".syllab_requeststart");
        t.j && r.length && r.data("remove") && r.remove();
        var n = jQuery(t.j);
        n.find(".syllab_jobtimings").each(function(t, e) {
            var a = jQuery(e);
            a.data("jobid") && (e = a.data("jobid"), a = a.closest(".syllab_row"), syllab_aborted_jobs[e] && a.hide())
        }), jQuery("#syllab_activejobsrow").html(n);
        r = n.find('.job-id[data-isclone="1"]');
        0 < r.length && (0 == jQuery(".syllabclone_action_box .syllabclone_network_info").length && 0 < jQuery("#syllab_activejobsrow .job-id .syllab_clone_url").length && syllab_send_command("get_clone_network_info", {
            clone_url: jQuery("#syllab_activejobsrow .job-id .syllab_clone_url").data("clone_url")
        }, function(t) {
            t.hasOwnProperty("html") && jQuery(".syllabclone_action_box").html(t.html)
        }), jQuery("#syllab_clone_activejobsrow").empty(), r.each(function(t, e) {
            jQuery(e).closest(".syllab_row").appendTo(jQuery("#syllab_clone_activejobsrow"))
        })), jQuery("#syllab_activejobs .syllab_jobtimings").each(function(t, e) {
            var a, r, n = jQuery(e);
            n.data("lastactivity") && n.data("jobid") && (a = n.data("jobid"), r = n.data("lastactivity"), (-1 == o || r < o) && (o = r), e = n.data("nextresumptionafter"), n = n.data("nextresumption"), timenow = (new Date).getTime(), 50 < r && 0 < n && e < -30 && timenow > syllab_last_forced_when + 1e5 && (syllab_last_forced_jobid != a || n != syllab_last_forced_resumption) && (syllab_last_forced_resumption = n, syllab_last_forced_jobid = a, syllab_last_forced_when = timenow, console.log("SyllabPlus: force resumption: job_id=" + a + ", resumption=" + n), syllab_send_command("forcescheduledresumption", {
                resumption: n,
                job_id: a
            }, function(t) {
                console.log(t)
            }, {
                json_parse: !1,
                alert_on_error: !1
            })))
        }), timenow = (new Date).getTime(), syllab_activejobs_nextupdate = timenow + 18e4, 1 == syllab_page_is_visible && "backups" == syllab_console_focussed_tab && (syllab_activejobs_nextupdate = -1 < o ? o < 5 ? timenow + 1750 : timenow + 5e3 : lastlog_lastdata == e ? timenow + 7500 : timenow + 1750), 0 < r.length && (syllab_activejobs_nextupdate = timenow + 6e3), lastlog_lastdata = e, null != t.j && "" != t.j ? (jQuery("#syllab_activejobsrow").show(), 0 < r.length && jQuery("#syllab_clone_activejobsrow").show(), a.hasOwnProperty("thisjobonly") && !syllab_inpage_hasbegun && jQuery("#syllab-jobid-" + a.thisjobonly).length ? (syllab_inpage_hasbegun = 1, console.log("SyllabPlus: the start of the requested backup job has been detected")) : !syllab_inpage_hasbegun && syllab_activejobslist_backupnownonce_only && jQuery(".syllab_jobtimings.isautobackup").length && (autobackup_nonce = jQuery(".syllab_jobtimings.isautobackup").first().data("jobid"), autobackup_nonce && (syllab_inpage_hasbegun = 1, syllab_backupnow_nonce = autobackup_nonce, a.thisjobonly = autobackup_nonce, console.log("SyllabPlus: the start of the requested backup job has been detected; id: " + autobackup_nonce))), 1 == syllab_inpage_hasbegun && jQuery("#syllab-jobid-" + a.thisjobonly + ".syllab_finished").length && (syllab_inpage_hasbegun = 2, console.log("SyllabPlus: the end of the requested backup job has been detected"), syllab_activejobs_update_timer && clearInterval(syllab_activejobs_update_timer), "undefined" != typeof syllab_inpage_success_callback && "" != syllab_inpage_success_callback ? syllab_inpage_success_callback.call(!1) : jQuery("#syllab-backupnow-inpage-modal").dialog("close")), "" == lastlog_jobs && setTimeout(function() {
            jQuery("#syllab_backup_started").slideUp()
        }, 3500), a.hasOwnProperty("thisjobonly") && syllab_backupnow_nonce && a.thisjobonly === syllab_backupnow_nonce && (jQuery(".syllab_requeststart").remove(), jQuery("#syllab-jobid-" + syllab_backupnow_nonce).is(".syllab_finished") && (syllab_activejobslist_backupnownonce_only = 0, syllab_aborted_jobs[syllab_backupnow_nonce] ? syllab_aborted_jobs = syllab_aborted_jobs.filter(function(t, e) {
            return t != syllab_backupnow_nonce
        }) : syllab_active_job_is_clone(syllab_backupnow_nonce) ? (syllab_show_success_modal(syllablion.clone_backup_complete), syllab_clone_jobs = syllab_clone_jobs.filter(function(t) {
            return t != syllab_backupnow_nonce
        })) : syllab_show_success_modal(syllablion.backup_complete), syllab_activejobs_update(!(syllab_backupnow_nonce = ""))))) : jQuery("#syllab_activejobsrow").is(":hidden") || ("undefined" != typeof lastbackup_laststatus && syllab_showlastbackup(), syllab_updatehistory(0, 0), jQuery("#syllab_activejobsrow").hide()), lastlog_jobs = t.j, null != t.ds && "" != t.ds && syllab_downloader_status_update(t.ds, e), null == t.u || "" == t.u || !jQuery("#syllab-poplog").dialog("isOpen") || (n = t.u).nonce == syllab_poplog_log_nonce && (syllab_poplog_log_pointer = n.pointer, null != n.log && "" != n.log && (r = jQuery("#syllab-poplog").scrollTop(), jQuery("#syllab-poplog-content").append(n.log), syllab_poplog_lastscroll != r && -1 != syllab_poplog_lastscroll || (jQuery("#syllab-poplog").scrollTop(jQuery("#syllab-poplog-content").prop("scrollHeight")), syllab_poplog_lastscroll = jQuery("#syllab-poplog").scrollTop())))
    } catch (t) {
        console.log(syllablion.unexpectedresponse + " " + e), console.log(t)
    }
}
jQuery(document).ajaxError(function(t, e, a, r) {
    var n, o, d;
    null != r && "" != r && null != e.responseText && "" != e.responseText && (console.log("Error caught by SyllabPlus ajaxError handler (follows) for " + a.url), console.log(r), 0 == a.url.search(ajaxurl) && (0 <= a.url.search("subaction=downloadstatus") ? (d = a.url.match(/timestamp=\d+/), o = a.url.match(/type=[a-z]+/), n = a.url.match(/findex=\d+/), e = a.url.match(/base=[a-z_]+/), n = n instanceof Array ? parseInt(n[0].substr(7)) : 0, o = o instanceof Array ? o[0].substr(5) : "", e = e instanceof Array ? e[0].substr(5) : "", d = d instanceof Array ? parseInt(d[0].substr(10)) : 0, "" != e && "" != o && 0 < d && jQuery("." + (e + d + "_" + o + "_" + n) + " .raw").html("<strong>" + syllablion.error + "</strong> " + syllablion.servererrorcode)) : 0 <= a.url.search("subaction=restore_alldownloaded") && jQuery("#syllab-restore-modal-stage2a").append("<br><strong>" + syllablion.error + "</strong> " + syllablion.servererrorcode + ": " + r)))
}), jQuery(function(m) {
    var e;
    m(document).on("slp/checkout/done", function(t, e) {
        e.hasOwnProperty("product") && "syllabpremium" === e.product && "complete" === e.status && (m(".premium-upgrade-purchase-success").show(), m(".syllab_feat_table").closest("section").hide(), m(".syllab_premium_cta__action").hide())
    }), m(".expertmode .advanced_settings_container .advanced_tools_button").on("click", function() {
        var t;
        t = m(this).attr("id"), m('.expertmode .advanced_settings_container .advanced_tools:not(".' + t + '")').hide(), m(".expertmode .advanced_settings_container .advanced_tools." + t).fadeIn("slow"), m(".expertmode .advanced_settings_container .advanced_tools_button:not(#" + t + ")").removeClass("active"), m(".expertmode .advanced_settings_container .advanced_tools_button#" + t).addClass("active")
    }), jQuery.ui && jQuery.ui.dialog && jQuery.ui.dialog.prototype._allowInteraction && (e = jQuery.ui.dialog.prototype._allowInteraction, jQuery.ui.dialog.prototype._allowInteraction = function(t) {
        return !!jQuery(t.target).closest(".select2-dropdown").length || e.apply(this, arguments)
    }), m("#syllabcentral_keys").on("click", "a.syllabcentral_keys_show", function(t) {
        t.preventDefault(), m(this).remove(), m("#syllabcentral_keys_table").slideDown()
    }), m("#syllabcentral_keycreate_altmethod_moreinfo_get").on("click", function(t) {
        t.preventDefault(), m(this).remove(), m("#syllabcentral_keycreate_altmethod_moreinfo").slideDown()
    }), m("#syllab-navtab-settings-content #remote-storage-holder").on("change keyup paste", ".syllab_webdav_settings", function() {
        var r = [];
        m(".syllab_webdav_settings").each(function(t, e) {
            var a = m(e).attr("id");
            a && "syllab_webdav_" == a.substring(0, 15) && (e = a.substring(15), id_split = e.split("_"), e = id_split[0], a = id_split[1], void 0 === r[a] && (r[a] = []), r[a][e] = this.value)
        });
        var t, e, a = "@",
            n = "/",
            o = ":",
            d = ":";
        for (e in r)(0 <= r[e].host.indexOf("@") || "" === r[e].host) && (a = ""), 0 <= r[e].host.indexOf("/") ? m("#syllab_webdav_host_error").show() : m("#syllab_webdav_host_error").hide(), 0 != r[e].path.indexOf("/") && "" !== r[e].path || (n = ""), "" !== r[e].user && "" !== r[e].pass || (o = ""), "" !== r[e].host && "" !== r[e].port || (d = ""), t = r[e].webdav + r[e].user + o + r[e].pass + a + encodeURIComponent(r[e].host) + d + r[e].port + n + r[e].path, masked_webdav_url = r[e].webdav + r[e].user + o + r[e].pass.replace(/./gi, "*") + a + encodeURIComponent(r[e].host) + d + r[e].port + n + r[e].path, m("#syllab_webdav_url_" + e).val(t), m("#syllab_webdav_masked_url_" + e).val(masked_webdav_url)
    }), m("#syllab-navtab-backups-content").on("click", ".js--delete-selected-backups", function(t) {
        t.preventDefault(), syllab_deleteallselected()
    }), m("#syllab-navtab-backups-content").on("click", ".syllab_existing_backups .backup-select input", function(t) {
        syllab_backups_selection.toggle(m(this).closest(".syllab_existing_backups_row"))
    }), m("#syllab-navtab-backups-content").on("click", "#cb-select-all", function(t) {
        m(this).is(":checked") ? syllab_backups_selection.selectAll() : syllab_backups_selection.deselectAll()
    }), m("#syllab-wrap").on("click", "[id^=syllabplus_manual_authorisation_submit_]", function(t) {
        t.preventDefault();
        var e, a = m(this).data("method"),
            t = m("#syllabplus_manual_authentication_data_" + a).val();
        m("#syllabplus_manual_authentication_error_" + a).text(), m("#syllab-wrap #syllabplus_manual_authorisation_template_" + a + " .syllabplus_spinner.spinner").addClass("visible"), m("#syllabplus_manual_authorisation_submit_" + a).prop("disabled", !0), syllab_send_command("manual_remote_storage_authentication", {
            method: e = a,
            auth_data: t
        }, function(t) {
            m("#syllab-wrap #syllabplus_manual_authorisation_template_" + e + " .syllabplus_spinner.spinner").removeClass("visible"), t.hasOwnProperty("result") && "success" === t.result ? (m("#syllab-wrap .syllabplus-top-menu").before(t.data), m("#syllab-wrap #syllabplus_manual_authorisation_template_" + e).parent().remove(), m("#syllab-wrap .syllab_authenticate_" + e).remove()) : t.hasOwnProperty("result") && "error" === t.result && (m("#syllabplus_manual_authentication_error_" + e).text(t.data), m("#syllabplus_manual_authorisation_submit_" + e).prop("disabled", !1))
        })
    }), m("#syllab-navtab-backups-content").on("click", ".js--select-all-backups", function(t) {
        syllab_backups_selection.selectAll()
    }), m("#syllab-navtab-backups-content").on("click", ".js--deselect-all-backups", function(t) {
        syllab_backups_selection.deselectAll()
    }), m("#syllab-navtab-backups-content").on("click", ".syllab_existing_backups .syllab_existing_backups_row", function(t) {
        (t.ctrlKey || t.metaKey) && (t.shiftKey ? (void 0 === syllab_backups_selection.firstMultipleSelectionIndex ? (m(document).on("keyup.MultipleSelection", function(t) {
            syllab_backups_selection.unregister_highlight_mode(), m(document).off(".MultipleSelection")
        }), syllab_backups_selection.select(this), m(this).addClass("range-selection-start"), syllab_backups_selection.register_highlight_mode()) : (syllab_backups_selection.selectAllInBetween(this), jQuery("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").removeClass("range-selection")), syllab_backups_selection.firstMultipleSelectionIndex = this.rowIndex - 1) : syllab_backups_selection.toggle(this))
    }), syllab_backups_selection.checkSelectionStatus(), m("#syllab-navtab-addons-content .wrap").on("click", ".syllabplus_com_login .ud_connectsubmit", function(t) {
        t.preventDefault();
        t = {
            email: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_email").val(),
            password: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_password").val(),
            auto_update: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_auto_updates").is(":checked") ? 1 : 0,
            auto_udc_connect: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_auto_udc_connect").is(":checked") ? 1 : 0
        };
        r.submit(t)
    }), m("#syllab-navtab-addons-content .wrap").on("keydown", ".syllabplus_com_login input", function(t) {
        13 == t.which && (t.preventDefault(), t = {
            email: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_email").val(),
            password: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_password").val(),
            auto_update: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_auto_updates").is(":checked") ? 1 : 0,
            auto_udc_connect: m("#syllab-navtab-addons-content .wrap .syllabplus_com_login #syllabplus-addons_options_auto_udc_connect").is(":checked") ? 1 : 0
        }, r.submit(t))
    }), m("#syllab-navtab-migrate-content").on("click", ".syllabclone_show_step_1", function(t) {
        m(".syllabplus-clone").addClass("opened"), m(".syllabclone_show_step_1").hide(), m(".syllab_migrate_widget_temporary_clone_stage1").show(), m(".syllab_migrate_widget_temporary_clone_stage0").hide()
    }), m("#syllab-navtab-migrate-content").on("click", ".syllab_migrate_widget_temporary_clone_show_stage0", function(t) {
        t.preventDefault(), m(".syllab_migrate_widget_temporary_clone_stage0").toggle()
    }), setup_migrate_tabs(), m("#syllab-navtab-migrate-content").on("click", ".syllab_migrate_widget_module_content .close", function(t) {
        m(".syllab_migrate_intro").show(), m(this).closest(".syllab_migrate_widget_module_content").hide()
    }), m("#syllab-navtab-migrate-content").on("click", ".syllab_migrate_add_site--trigger", function(t) {
        t.preventDefault(), m(".syllab_migrate_add_site").toggle()
    }), m("#syllab-navtab-migrate-content").on("click", ".syllab_migrate_widget_module_content .syllabplus_com_login .ud_connectsubmit", function(t) {
        t.preventDefault();
        var e = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_email").val(),
            a = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_password").val(),
            r = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_two_factor_code").val(),
            t = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login .temporary_clone_terms_and_conditions").is(":checked") ? 1 : 0;
        e && a ? n({
            form_data: {
                email: e,
                password: a,
                two_factor_code: r,
                consent: t
            }
        }) : m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login_status").html("<b>" + syllablion.error + "</b> " + syllablion.username_password_required).show()
    }), m("#syllab-navtab-migrate-content").on("keydown", ".syllab_migrate_widget_module_content .syllabplus_com_login input", function(t) {
        var e, a, r;
        13 == t.which && (t.preventDefault(), e = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_email").val(), a = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_password").val(), r = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_two_factor_code").val(), t = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login .temporary_clone_terms_and_conditions").is(":checked") ? 1 : 0, e && a ? n({
            form_data: {
                email: e,
                password: a,
                two_factor_code: r,
                consent: t
            }
        }) : m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login_status").html("<b>" + syllablion.error + "</b> " + syllablion.username_password_required).show())
    }), m("#syllab-navtab-migrate-content").on("click", ".syllab_migrate_widget_module_content .syllabplus_com_key .ud_key_connectsubmit", function(t) {
        t.preventDefault();
        var e = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key #temporary_clone_options_key").val(),
            t = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key .temporary_clone_terms_and_conditions").is(":checked") ? 1 : 0;
        e ? a({
            form_data: {
                clone_key: e,
                consent: t
            }
        }) : m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key_status").html("<b>" + syllablion.error + "</b> " + syllablion.clone_key_required).show()
    }), m("#syllab-navtab-migrate-content").on("keydown", ".syllab_migrate_widget_module_content .syllabplus_com_key input", function(t) {
        var e;
        13 == t.which && (t.preventDefault(), e = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key #temporary_clone_options_key").val(), t = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key .temporary_clone_terms_and_conditions").is(":checked") ? 1 : 0, e ? a({
            form_data: {
                clone_key: e,
                consent: t
            }
        }) : m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key_status").html("<b>" + syllablion.error + "</b> " + syllablion.clone_key_required).show())
    }), m("#syllab-navtab-migrate-content").on("change", ".syllab_migrate_widget_module_content #syllabplus_clone_php_options", function() {
        var t = m(this).data("php_version");
        m(this).val() < t ? m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html(syllablion.clone_version_warning) : m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html("")
    }), m("#syllab-navtab-migrate-content").on("change", ".syllab_migrate_widget_module_content #syllabplus_clone_wp_options", function() {
        var t = m(this).data("wp_version");
        m(this).val() < t ? m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html(syllablion.clone_version_warning) : m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html("")
    }), m("#syllab-navtab-migrate-content").on("change", ".syllab_migrate_widget_module_content #syllabplus_clone_backup_options", function() {
        m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options > option").each(function() {
            var t = m(this).val();
            "starter" == t && m('#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options  option[value="' + t + '"]').prop("selected", !0), m('#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options  option[value="' + t + '"]').prop("disabled", !1)
        });
        var a, t = m(this).find("option:selected");
        "current" != m(t).data("nonce") && "wp_only" != m(t).data("nonce") && (a = m(t).data("size"), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options > option").each(function() {
            var t = m(this).data("size"),
                e = m(this).val();
            if (!(t <= a)) return m('#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options  option[value="' + e + '"]').prop("selected", !0), !1;
            m('#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options  option[value="' + e + '"]').prop("disabled", !0)
        }))
    }), m("#syllab-navtab-migrate-content").on("click", ".syllab_migrate_widget_module_content #syllab_migrate_createclone", function(t) {
        t.preventDefault(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllab_migrate_createclone").prop("disabled", !0), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html(""), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_spinner.spinner").addClass("visible");
        var e = m(this).data("clone_id"),
            a = m(this).data("secret_token"),
            r = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_php_options").val(),
            n = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_wp_options").val(),
            o = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_region_options").val(),
            d = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_package_options").val(),
            u = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_syllabclone_branch").val(),
            i = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_syllabplus_branch").val(),
            s = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_admin_login_options").is(":checked"),
            p = m("#syllabplus_clone_use_queue").is(":checked") ? 1 : 0,
            l = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_backupnow_db_anon_all").is(":checked") ? 1 : 0,
            _ = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_backupnow_db_anon_non_staff").is(":checked") ? 1 : 0,
            c = "current",
            f = "current",
            g = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_backup_options").length,
            t = m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllabplus_clone_backup_options").find("option:selected");
        0 !== g && void 0 !== t && (c = t.data("nonce"), f = t.data("timestamp"));
        p = {
            form_data: {
                clone_id: e,
                secret_token: a,
                install_info: {
                    php_version: r,
                    wp_version: n,
                    region: o,
                    package: d,
                    admin_only: s,
                    syllabclone_branch: void 0 === u ? "" : u,
                    syllabplus_branch: void 0 === i ? "" : i,
                    use_queue: void 0 === p ? 1 : p
                }
            }
        }, _ = {
            db_anon_all: l,
            db_anon_non_staff: _
        };
        "wp_only" === c && (p.form_data.install_info.wp_only = 1),
            function t(r, n, o, d) {
                var u = "";
                "current" != n && syllab_send_command("whichdownloadsneeded", {
                    syllabplus_clone: !0,
                    timestamp: n
                }, function(t) {
                    if (t.hasOwnProperty("downloads") && (console.log("SyllabPlus: items which still require downloading follow"), u = t.downloads, console.log(u)), 0 != u.length)
                        for (var e = 0; e < u.length; e++) syllab_downloader("udclonedlstatus_", n, u[e][0], "#ud_downloadstatus3", u[e][1], "", !1)
                }, {
                    alert_on_error: !1,
                    error_callback: function(t, e, a, r) {
                        void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html('<p style="color:red;">' + r.fatal_error_message + "</p>")) : (a = "syllab_send_command: error: " + e + " (" + a + ")", m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html('<p style="color:red; margin: 5px;">' + a + "</p>"), console.log(a), console.log(t))
                    }
                });
                setTimeout(function() {
                    var e, a;
                    0 == u.length ? (e = r.form_data.clone_id, a = r.form_data.secret_token, syllab_send_command("process_syllabplus_clone_create", r, function(t) {
                        try {
                            if (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllab_migrate_createclone").prop("disabled", !1), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_spinner.spinner").removeClass("visible"), t.hasOwnProperty("status") && "error" == t.status) return void m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html(syllablion.error + " " + t.message).show();
                            "success" === t.status && (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage3").show(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage3").html(t.html), temporary_clone_timeout && clearTimeout(temporary_clone_timeout), t.hasOwnProperty("secret_token") && (a = t.secret_token), "wp_only" === o ? (jQuery("#syllab_clone_progress .syllabplus_spinner.spinner").addClass("visible"), b(e, a)) : (jQuery("#syllab_clone_progress .syllabplus_spinner.spinner").addClass("visible"), h(e, a, t.url, t.key, o, n, d)))
                        } catch (t) {
                            m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllab_migrate_createclone").prop("disabled", !1), console.log("Error when processing the response of process_syllabplus_clone_create (as follows)"), console.log(t)
                        }
                    })) : t(r, n, o, d)
                }, 5e3)
            }(p, f, c, _)
    });
    var r = {};

    function n(t) {
        m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login_status").html("").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login .syllabplus_spinner.spinner").addClass("visible"), syllab_send_command("process_syllabplus_clone_login", t, function(t) {
            try {
                if (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login .syllabplus_spinner.spinner").removeClass("visible"), t.hasOwnProperty("status") && "error" == t.status) return m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login_status").html(t.message).show(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 .tfa_fields").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 .non_tfa_fields").show(), void m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_login #temporary_clone_options_two_factor_code").val("");
                t.hasOwnProperty("tfa_enabled") && 1 == t.tfa_enabled && (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 .non_tfa_fields").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 .tfa_fields").show(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 input#temporary_clone_options_two_factor_code").trigger("focus")), "authenticated" === t.status && (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 .non_tfa_fields").show(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 .tfa_fields").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1 input#temporary_clone_options_two_factor_code").val(""), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").show(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").html(t.html), t.hasOwnProperty("clone_info") && t.clone_info.hasOwnProperty("expires_after") && o(t.clone_info.expires_after))
            } catch (t) {
                console.log(t)
            }
        })
    }

    function a(t) {
        m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key_status").html("").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key .syllabplus_spinner.spinner").addClass("visible"), syllab_send_command("process_syllabplus_clone_login", t, function(t) {
            try {
                if (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key .syllabplus_spinner.spinner").removeClass("visible"), t.hasOwnProperty("status") && "error" == t.status) return void m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_com_key_status").html(t.message).show();
                "authenticated" === t.status && (m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").show(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").html(t.html), t.hasOwnProperty("clone_info") && t.clone_info.hasOwnProperty("expires_after") && o(t.clone_info.expires_after))
            } catch (t) {
                console.log(t)
            }
        })
    }

    function o(t) {
        temporary_clone_timeout = setTimeout(function() {
            m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").hide(), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage2").html(""), m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllab_migrate_widget_temporary_clone_stage1").show()
        }, 1e3 * t)
    }

    function h(t, e, a, r, n, o, d) {
        d = {
            syllabplus_clone_backup: 1,
            backupnow_nodb: 0,
            backupnow_nofiles: 0,
            backupnow_nocloud: 0,
            backupnow_label: "SyllabPlus Clone",
            extradata: "",
            onlythisfileentity: "plugins,themes,uploads,others",
            clone_id: t,
            secret_token: e,
            clone_url: a,
            key: r,
            backup_nonce: n,
            backup_timestamp: o,
            db_anon_all: d.db_anon_all,
            db_anon_non_staff: d.db_anon_non_staff
        };
        syllab_activejobslist_backupnownonce_only = 1, syllab_send_command("backupnow", d, function(t) {
            jQuery("#syllab_clone_progress .syllabplus_spinner.spinner").removeClass("visible"), jQuery("#syllab_backup_started").html(t.m), t.hasOwnProperty("nonce") && (syllab_backupnow_nonce = t.nonce, syllab_clone_jobs.push(syllab_backupnow_nonce), syllab_inpage_success_callback = function() {
                jQuery("#syllab_clone_activejobsrow").hide(), syllab_aborted_jobs[syllab_backupnow_nonce] ? jQuery("#syllab_clone_progress").html(syllablion.clone_backup_aborted) : jQuery("#syllab_clone_progress").html(syllablion.clone_backup_complete)
            }, console.log("SyllabPlus: ID of started job: " + syllab_backupnow_nonce)), syllab_activejobs_update(!0)
        })
    }

    function b(e, a) {
        var t = {
            clone_id: e,
            secret_token: a
        };
        setTimeout(function() {
            syllab_send_command("process_syllabplus_clone_poll", t, function(t) {
                if (t.hasOwnProperty("status")) {
                    if ("error" == t.status) return void m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_clone_status").html(syllablion.error + " " + t.message).show();
                    if ("success" === t.status && t.hasOwnProperty("data") && t.data.hasOwnProperty("wordpress_credentials")) return m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content .syllabplus_spinner.spinner").removeClass("visible"), void m("#syllab-navtab-migrate-content .syllab_migrate_widget_module_content #syllab_clone_progress").append("<br>WordPress " + syllablion.credentials + ":<br>" + syllablion.username + ": " + t.data.wordpress_credentials.username + "<br>" + syllablion.password + ": " + t.data.wordpress_credentials.password)
                } else console.log(t);
                b(e, a)
            })
        }, 6e4)
    }

    function d(t) {
        var e = Handlebars.compile(syllablion.remote_storage_templates[t]),
            a = syllablion.remote_storage_options[t].default,
            r = syllablion.remote_storage_methods[t];
        a.instance_id = "s-" + function(t) {
            for (var e = "", a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", r = 0; r < t; r++) e += a.charAt(Math.floor(Math.random() * a.length));
            return e
        }(32), a.instance_enabled = 1, a.instance_label = r + " (" + (jQuery("." + t + "_syllab_remote_storage_border").length + 1) + ")", a.instance_conditional_logic = {
            type: "",
            rules: [],
            day_of_the_week_options: syllablion.conditional_logic.day_of_the_week_options,
            logic_options: syllablion.conditional_logic.logic_options,
            operand_options: syllablion.conditional_logic.operand_options,
            operator_options: syllablion.conditional_logic.operator_options
        };
        a = e(a);
        jQuery(a).hide().insertAfter(jQuery("." + t + "_add_instance_container").first()).show("slow")
    }

    function t(t) {
        !!jQuery("#syllabcentral_mothership_other").is(":checked") ? (jQuery("#syllabcentral_keycreate_mothership").prop("disabled", !1), t ? jQuery("#syllabcentral_keycreate_mothership_firewalled_container").show() : (jQuery(".syllabcentral_wizard_self_hosted_stage2").show(), jQuery("#syllabcentral_keycreate_mothership_firewalled_container").slideDown(), jQuery("#syllabcentral_keycreate_mothership").trigger("focus"))) : (jQuery("#syllabcentral_keycreate_mothership").prop("disabled", !0), t || (jQuery(".syllabcentral_wizard_self_hosted_stage2").hide(), u()))
    }

    function u() {
        jQuery("#syllabcentral_wizard_stage1_error").text("");
        var e = "";
        if (jQuery("#syllabcentral_mothership_syllabpluscom").is(":checked")) jQuery(".syllabcentral_keycreate_description").hide(), e = "syllabplus.com";
        else if (jQuery("#syllabcentral_mothership_other").is(":checked")) {
            jQuery(".syllabcentral_keycreate_description").show();
            var a = jQuery("#syllabcentral_keycreate_mothership").val();
            if ("" == a) return void jQuery("#syllabcentral_wizard_stage1_error").text(syllablion.syllabcentral_wizard_empty_url);
            try {
                e = new URL(a).hostname
            } catch (t) {
                if (!(e = "undefined" == typeof URL ? jQuery("<a>").prop("href", a).prop("hostname") : e) || "undefined" != typeof URL) return void jQuery("#syllabcentral_wizard_stage1_error").text(syllablion.syllabcentral_wizard_invalid_url)
            }
        }
        jQuery("#syllabcentral_keycreate_description").val(e), jQuery(".syllabcentral_wizard_stage1").hide(), jQuery(".syllabcentral_wizard_stage2").show()
    }
    r.set_status = function(t) {
        m("#syllab-navtab-addons-content .wrap").find(".syllabplus_spinner.spinner").text(t)
    }, r.show_loader = function() {
        m("#syllab-navtab-addons-content .wrap").find(".syllabplus_spinner.spinner").addClass("visible"), m("#syllab-navtab-addons-content .wrap").find(".ud_connectsubmit").prop("disabled", "disabled")
    }, r.hide_loader = function() {
        m("#syllab-navtab-addons-content .wrap").find(".syllabplus_spinner.spinner").removeClass("visible").text(syllablion.processing), m("#syllab-navtab-addons-content .wrap").find(".ud_connectsubmit").prop("disabled", !1)
    }, r.submit = function(e) {
        if (m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html("").hide(), this.stage) switch (this.stage) {
            case "connect_udc":
            case "connect_udc_TFA":
                var t = m("#syllabplus-addons_options_email").val(),
                    a = m("#syllabplus-addons_options_password").val();
                this.login_data.email = t, this.login_data.password = a, this.connect_udc();
                break;
            case "create_key":
                this.create_key();
                break;
            default:
                this.stage = null, r.submit()
        } else this.set_status(syllablion.connecting), this.show_loader(), syllab_send_command("syllabplus_com_login_submit", {
            data: e
        }, function(t) {
            t.hasOwnProperty("success") ? m("#syllabplus-addons_options_auto_udc_connect").is(":checked") ? (this.login_data = {
                email: e.email,
                password: e.password,
                i_consent: 1,
                two_factor_code: ""
            }, r.create_key()) : (r.hide_loader(), m("#syllab-navtab-addons-content .wrap .syllabplus_com_login").trigger("submit")) : t.hasOwnProperty("error") && (r.hide_loader(), m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html(t.message).show())
        }.bind(this))
    }, r.create_key = function() {
        this.stage = "create_key", this.set_status(syllablion.udc_cloud_connected), this.show_loader();
        syllab_send_command("syllabcentral_create_key", {
            where_send: "__syllabpluscom",
            key_description: "",
            key_size: null,
            mothership_firewalled: 0
        }, function(t) {
            try {
                var e = ud_parse_json(t);
                if (e.hasOwnProperty("error")) return void console.log(e);
                e.hasOwnProperty("bundle") ? (console.log("bundle", e.bundle), this.login_data.key = e.bundle, this.stage = "connect_udc", r.connect_udc()) : (e.hasOwnProperty("r") ? (m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html(syllablion.trouble_connecting).show(), alert(e.r)) : (m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html(syllablion.trouble_connecting).show(), console.log(e)), r.hide_loader())
            } catch (t) {
                console.log(t), r.hide_loader()
            }
        }.bind(this), {
            json_parse: !1
        })
    }, r.connect_udc = function() {
        var a = m("#syllab-navtab-addons-content .wrap");
        r.set_status(syllablion.udc_cloud_key_created), r.show_loader(), "connect_udc_TFA" == this.stage && (this.login_data.two_factor_code = a.find("input#syllabplus-addons_options_two_factor_code").val(), r.set_status(syllablion.checking_tfa_code));
        var t = {
            form_data: this.login_data
        };
        t.form_data.addons_options_connect = 1, syllab_send_command("process_syllabcentral_login", t, function(t) {
            try {
                var e = ud_parse_json(t);
                if (e.hasOwnProperty("error")) {
                    if ("incorrect_password" === e.code && (a.find(".tfa_fields").hide(), a.find(".non_tfa_fields").show(), a.find("input#syllabplus-addons_options_two_factor_code").val(""), a.find("input#syllabplus-addons_options_password").val("").trigger("focus")), "no_key_found" === e.code && (this.stage = "create_key"), "no_licences_available" !== e.code) return m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html(e.message).show(), m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").find("a").attr("target", "_blank"), console.log(e), void r.hide_loader();
                    m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html(syllablion.login_udc_no_licences_short).show(), e.status = "authenticated", a.find('input[name="_wp_http_referer"]').val(function(t, e) {
                        return e + "&udc_connect=0"
                    })
                }
                e.hasOwnProperty("tfa_enabled") && 1 == e.tfa_enabled && (m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html("").hide(), a.find(".non_tfa_fields").hide(), a.find(".tfa_fields").show(), a.find("input#syllabplus-addons_options_two_factor_code").trigger("focus"), this.stage = "connect_udc_TFA"), "authenticated" === e.status && (a.find(".non_tfa_fields").hide(), a.find(".tfa_fields").hide(), a.find(".syllab-after-form-table").hide(), this.stage = null, m("#syllab-navtab-addons-content .wrap .syllabplus_com_login_status").html(syllablion.login_successful_short).show().addClass("success"), setTimeout(function() {
                    m("#syllab-navtab-addons-content .wrap form.syllabplus_com_login").trigger("submit")
                }, 1e3))
            } catch (t) {
                console.log(t)
            }
            r.hide_loader()
        }.bind(this), {
            json_parse: !1
        })
    }, m("#syllab-navtab-settings-content #remote-storage-holder").on("click", ".syllabplusmethod a.syllab_add_instance", function(t) {
        t.preventDefault(), syllab_settings_form_changed = !0, d(m(this).data("method"))
    }), m("#syllab-navtab-settings-content #remote-storage-holder").on("click", ".syllabplusmethod a.syllab_delete_instance", function(t) {
        t.preventDefault(), syllab_settings_form_changed = !0;
        var e = m(this).data("method"),
            t = m(this).data("instance_id");
        1 === m("." + e + "_syllab_remote_storage_border").length && d(e), m("." + e + "-" + t).hide("slow", function() {
            m(this).remove()
        })
    }), m("#syllab-navtab-settings-content #remote-storage-holder").on("click", ".syllabplusmethod .syllab_edit_label_instance", function(t) {
        m(this).find("span").hide(), m(this).attr("contentEditable", !0).trigger("focus")
    }), m("#syllab-navtab-settings-content #remote-storage-holder").on("keyup", ".syllabplusmethod .syllab_edit_label_instance", function(t) {
        var e = jQuery(this).data("method"),
            a = jQuery(this).data("instance_id"),
            r = jQuery(this).text();
        m("#syllab_" + e + "_instance_label_" + a).val(r)
    }), m("#syllab-navtab-settings-content #remote-storage-holder").on("blur", ".syllabplusmethod .syllab_edit_label_instance", function(t) {
        m(this).attr("contentEditable", !1), m(this).find("span").show()
    }), m("#syllab-navtab-settings-content #remote-storage-holder").on("keypress", ".syllabplusmethod .syllab_edit_label_instance", function(t) {
        13 === t.which && (m(this).attr("contentEditable", !1), m(this).find("span").show(), m(this).trigger("blur"))
    }), jQuery("#syllab-navtab-settings-content #remote-storage-holder").on("change", "input[class='syllab_instance_toggle']", function() {
        syllab_settings_form_changed = !0, jQuery(this).is(":checked") ? jQuery(this).siblings("label").html(syllablion.instance_enabled) : jQuery(this).siblings("label").html(syllablion.instance_disabled)
    }), jQuery("#syllab-navtab-settings-content #remote-storage-holder").on("change", "select[class='logic_type']", function() {
        syllab_settings_form_changed = !0, "" !== this.value ? (jQuery("div.logic", jQuery(this).parents("tr.syllabplusmethod")).show(), jQuery(this).parents("tr.syllabplusmethod").find("div.logic ul.rules > li").each(function() {
            jQuery(this).find("select").each(function() {
                jQuery(this).prop("disabled", !1)
            })
        })) : (jQuery(this).parents("tr.syllabplusmethod").find("div.logic ul.rules > li").each(function() {
            jQuery(this).find("select").each(function() {
                jQuery(this).prop("disabled", !0)
            })
        }), jQuery(this).parents("tr.syllabplusmethod").find("div.logic").hide())
    }), jQuery("#syllab-navtab-settings-content #remote-storage-holder").on("change", "select[class='conditional_logic_operand']", function() {
        if (syllab_settings_form_changed = !0, jQuery(this).parent().find("select:nth(2)").empty(), "day_of_the_week" === jQuery(this).val())
            for (i = 0; i < syllablion.conditional_logic.day_of_the_week_options.length; i++) jQuery(this).parent().find("select:nth(2)").append(jQuery('<option value="' + syllablion.conditional_logic.day_of_the_week_options[i].index + '"></option>').text(syllablion.conditional_logic.day_of_the_week_options[i].value));
        else if ("day_of_the_month" === jQuery(this).val())
            for (i = 1; i <= 31; i++) jQuery(this).parent().find("select:nth(2)").append(jQuery('<option value="' + i + '"></option>').text(i))
    }), jQuery("#syllab-navtab-settings-content #remote-storage-holder").on("click", "div.conditional_remote_backup ul.rules li span", function() {
        syllab_settings_form_changed = !0;
        var t = jQuery(this).parents("ul.rules");
        jQuery(this).hasClass("remove-rule") && jQuery(this).parent().slideUp(function() {
            jQuery(this).remove(), jQuery(t).find("> li").length < 2 && jQuery("li:nth(0) span.remove-rule", t).remove()
        })
    }), jQuery("#syllab-navtab-settings-content #remote-storage-holder").on("click", "div.conditional_remote_backup input.add-new-rule", function() {
        var t = jQuery(this).parent().find("ul.rules");
        jQuery(t).find("> li").length < 2 && jQuery(t).find("li:nth(0)").append('<span class="remove-rule"><svg viewbox="0 0 25 25"><line x1="6.5" y1="18.5" x2="18.5" y2="6.5" fill="none" stroke="#FF6347" stroke-width="3" vector-effect="non-scaling-stroke" ></line><line y1="6.5" x1="6.5" y2="18.5" x2="18.5" fill="none" stroke="#FF6347" stroke-width="3" vector-effect="non-scaling-stroke" ></line></svg></span>'), $cloned_item = jQuery(t).find("> li").last().clone(), jQuery($cloned_item).find("> select").each(function() {
            jQuery(this).prop("name", jQuery(this).prop("name").replace(/\[instance_conditional_logic\]\[rules\]\[[0-9]+\]/gi, "[instance_conditional_logic][rules][" + jQuery(t).data("rules") + "]"))
        }), jQuery(t).append($cloned_item), jQuery(t).data("rules", parseInt(jQuery(t).data("rules")) + 1), jQuery($cloned_item).find('select[name*="[operand]"]').trigger("change")
    }), jQuery("#syllab-navtab-settings-content #remote-storage-holder").on("click", ".syllabplusmethod button.syllab-test-button", function() {
        var r = jQuery(this).data("method"),
            n = jQuery(this).data("instance_id");
        syllab_remote_storage_test(r, function(t, e, a) {
            return "sftp" == r && (a.hasOwnProperty("scp") && a.scp ? alert(syllablion.settings_test_result.replace("%s", "SCP") + " " + t.output) : alert(syllablion.settings_test_result.replace("%s", "SFTP") + " " + t.output), t.hasOwnProperty("data") && t.data && t.data.hasOwnProperty("valid_md5_fingerprint") && t.data.valid_md5_fingerprint && m("#syllab_sftp_fingerprint_" + n).val(t.data.valid_md5_fingerprint), !0)
        }, n)
    }), m("#syllab-navtab-settings-content select.syllab_interval, #syllab-navtab-settings-content select.syllab_interval_database").on("change", function() {
        syllab_check_same_times()
    }), m("#backupnow_includefiles_showmoreoptions").on("click", function(t) {
        t.preventDefault(), m("#backupnow_includefiles_moreoptions").toggle()
    }), m("#backupnow_database_showmoreoptions").on("click", function(t) {
        t.preventDefault(), m("#backupnow_database_moreoptions").toggle()
    }), m("#backupnow_db_anon_all").on("click", function(t) {
        m("#backupnow_db_anon_non_staff").prop("checked") && m("#backupnow_db_anon_non_staff").prop("checked", !1)
    }), m("#backupnow_db_anon_non_staff").on("click", function(t) {
        m("#backupnow_db_anon_all").prop("checked") && m("#backupnow_db_anon_all").prop("checked", !1)
    }), m("#syllab-navtab-migrate-content").on("click", "#syllabplus_clone_backupnow_db_anon_all", function() {
        m("#syllabplus_clone_backupnow_db_anon_non_staff").prop("checked") && m("#syllabplus_clone_backupnow_db_anon_non_staff").prop("checked", !1)
    }), m("#syllab-navtab-migrate-content").on("click", "#syllabplus_clone_backupnow_db_anon_non_staff", function() {
        m("#syllabplus_clone_backupnow_db_anon_all").prop("checked") && m("#syllabplus_clone_backupnow_db_anon_all").prop("checked", !1)
    }), m("#syllab-backupnow-modal").on("click", "#backupnow_includecloud_showmoreoptions", function(t) {
        t.preventDefault(), m("#backupnow_includecloud_moreoptions").toggle()
    }), m("#syllab-navtab-backups-content").on("click", "a.syllab_diskspaceused_update", function(t) {
        t.preventDefault(), syllabplus_diskspace()
    }), m(".advanced_settings_content a.syllab_diskspaceused_update").on("click", function(t) {
        t.preventDefault(), jQuery(".advanced_settings_content .syllab_diskspaceused").html("<em>" + syllablion.calculating + "</em>"), syllab_send_command("get_fragment", {
            fragment: "disk_usage",
            data: "syllab"
        }, function(t) {
            jQuery(".advanced_settings_content .syllab_diskspaceused").html(t.output)
        }, {
            type: "GET"
        })
    }), m("#syllab-navtab-backups-content a.syllab_uploader_toggle").on("click", function(t) {
        t.preventDefault(), m("#syllab-plupload-modal").slideToggle()
    }), m("#syllab-navtab-backups-content a.syllab_rescan_local").on("click", function(t) {
        t.preventDefault(), syllab_updatehistory(1, 0)
    }), m("#syllab-navtab-backups-content a.syllab_rescan_remote").on("click", function(t) {
        t.preventDefault(), confirm(syllablion.remote_scan_warning) && syllab_updatehistory(1, 1)
    }), m("#syllabplus-remote-rescan-debug").on("click", function(t) {
        t.preventDefault(), syllab_updatehistory(1, 1, 1)
    }), jQuery("#syllabcentral_keys").on("click", 'input[type="radio"]', function() {
        t(!1)
    }), t(!0), jQuery("#syllabcentral_keys").on("click", "#syllabcentral_view_log", function(t) {
        t.preventDefault(), jQuery("#syllabcentral_view_log_container").block({
            message: '<div style="margin: 8px; font-size:150%;"><img src="' + syllablion.ud_url + '/images/udlogo-rotating.gif" height="80" width="80" style="padding-bottom:10px;"><br>' + syllablion.fetching + "</div>"
        });
        try {
            syllab_send_command("syllabcentral_get_log", null, function(t) {
                jQuery("#syllabcentral_view_log_container").unblock(), t.hasOwnProperty("log_contents") ? jQuery("#syllabcentral_view_log_contents").html('<div style="border:1px solid;padding: 2px;max-height: 400px; overflow-y:scroll;">' + t.log_contents + "</div>") : console.response(resp)
            }, {
                error_callback: function(t, e, a, r) {
                    jQuery("#syllabcentral_view_log_container").unblock(), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
                }
            })
        } catch (t) {
            jQuery("#syllab_central_key").html(), console.log(t)
        }
    }), jQuery("#syllabcentral_keys").on("click", "#syllabcentral_wizard_go", function(t) {
        jQuery("#syllabcentral_wizard_go").hide(), jQuery(".syllabcentral_wizard_success").remove(), jQuery(".create_key_container").show()
    }), jQuery("#syllabcentral_keys").on("click", "#syllabcentral_stage1_go", function(t) {
        t.preventDefault(), jQuery(".syllabcentral_wizard_stage2").hide(), jQuery(".syllabcentral_wizard_stage1").show()
    }), jQuery("#syllabcentral_keys").on("click", "#syllabcentral_stage2_go", function(t) {
        t.preventDefault(), u()
    }), jQuery("#syllabcentral_keys").on("click", "#syllabcentral_keycreate_go", function(t) {
        t.preventDefault();
        var e = !!jQuery("#syllabcentral_mothership_other").is(":checked"),
            a = jQuery("#syllabcentral_keycreate_description").val(),
            r = jQuery("#syllabcentral_keycreate_keysize").val(),
            t = "__syllabpluscom";
        if (data = {
                key_description: a,
                key_size: r
            }, e && "http" != (t = jQuery("#syllabcentral_keycreate_mothership").val()).substring(0, 4)) alert(syllablion.enter_mothership_url);
        else {
            data.mothership_firewalled = jQuery("#syllabcentral_keycreate_mothership_firewalled").is(":checked") ? 1 : 0, data.where_send = t, jQuery(".create_key_container").hide(), jQuery(".syllabcentral_wizard_stage1").show(), jQuery(".syllabcentral_wizard_stage2").hide(), jQuery("#syllabcentral_keys").block({
                message: '<div style="margin: 8px; font-size:150%;"><img src="' + syllablion.ud_url + '/images/udlogo-rotating.gif" height="80" width="80" style="padding-bottom:10px;"><br>' + syllablion.creating_please_allow + "</div>"
            });
            try {
                syllab_send_command("syllabcentral_create_key", data, function(t) {
                    jQuery("#syllabcentral_keys").unblock();
                    try {
                        if (t.hasOwnProperty("error")) return alert(t.error), void console.log(t);
                        alert(t.r), t.hasOwnProperty("bundle") && t.hasOwnProperty("keys_guide") ? (jQuery("#syllabcentral_keys_content").html(t.keys_guide), jQuery("#syllabcentral_keys_content").append('<div class="syllabcentral_wizard_success">' + t.r + '<br><textarea onclick="this.select();" style="width:620px; height:165px; word-wrap:break-word; border: 1px solid #aaa; border-radius: 3px; padding:4px;">' + t.bundle + "</textarea></div>")) : console.log(t), t.hasOwnProperty("keys_table") && jQuery("#syllabcentral_keys_content").append(t.keys_table), jQuery("#syllabcentral_wizard_go").show()
                    } catch (t) {
                        alert(syllablion.unexpectedresponse + " " + response), console.log(t)
                    }
                }, {
                    error_callback: function(t, e, a, r) {
                        jQuery("#syllabcentral_keys").unblock(), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
                    }
                })
            } catch (t) {
                jQuery("#syllab_central_key").html(), console.log(t)
            }
        }
    }), jQuery("#syllabcentral_keys").on("click", ".syllabcentral_key_delete", function(t) {
        t.preventDefault();
        t = jQuery(this).data("key_id");
        void 0 !== t ? (jQuery("#syllabcentral_keys").block({
            message: '<div style="margin: 8px; font-size:150%;"><img src="' + syllablion.ud_url + '/images/udlogo-rotating.gif" height="80" width="80" style="padding-bottom:10px;"><br>' + syllablion.deleting + "</div>"
        }), syllab_send_command("syllabcentral_delete_key", {
            key_id: t
        }, function(t) {
            jQuery("#syllabcentral_keys").unblock(), t.hasOwnProperty("keys_table") && jQuery("#syllabcentral_keys_content").html(t.keys_table)
        }, {
            error_callback: function(t, e, a, r) {
                jQuery("#syllabcentral_keys").unblock(), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
            }
        })) : console.log("SyllabPlus: .syllabcentral_key_delete clicked, but no key ID found")
    }), jQuery("#syllab_reset_sid").on("click", function(t) {
        t.preventDefault(), syllab_send_command("reset_site_id", null, function(t) {
            jQuery("#syllab_show_sid").html(t)
        }, {
            json_parse: !1
        })
    }), jQuery("#syllab-navtab-settings-content form input:not('.udignorechange'), #syllab-navtab-settings-content form select").on("change", function(t) {
        syllab_settings_form_changed = !0
    }), jQuery("#syllab-navtab-settings-content form input[type='submit']").on("click", function(t) {
        syllab_settings_form_changed = !1
    });
    var s = 180;
    jQuery(".syllab-bigbutton").each(function(t, e) {
        e = jQuery(e).width();
        s < e && (s = e)
    }), 180 < s && jQuery(".syllab-bigbutton").width(s), jQuery("#syllab-navtab-backups-content").length && setInterval(function() {
        syllab_activejobs_update(!1)
    }, 1250), setTimeout(function() {
        jQuery("#setting-error-settings_updated").slideUp()
    }, 5e3), jQuery("#syllab_restore_db").on("change", function() {
        jQuery("#syllab_restore_db").is(":checked") && 1 == jQuery(this).data("encrypted") ? jQuery("#syllab_restorer_dboptions").slideDown() : jQuery("#syllab_restorer_dboptions").slideUp()
    }), syllab_check_same_times();
    var p = {};
    p[syllablion.close] = function() {
        jQuery(this).dialog("close")
    }, jQuery("#syllab-message-modal").dialog({
        autoOpen: !1,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).dialog("option", "width", 520), m(this).dialog("option", "minHeight", 260), 360 < m(window).height() ? m(this).dialog("option", "height", 360) : m(this).dialog("option", "height", m(window).height() - 30)
        },
        modal: !0,
        buttons: p
    });
    p = {};
    p[syllablion.deletebutton] = function() {
        ! function n(t, e, a, r) {
            jQuery("#syllab-delete-modal").dialog("close");
            var o = t;
            var d = e;
            var u = a;
            var i = r;
            var s = jQuery("#syllab_delete_timestamp").val().split(",");
            var p = "";
            var r = jQuery("#syllab_delete_form").serializeArray();
            var l = {};
            m.each(r, function() {
                void 0 !== l[this.name] ? (l[this.name].push || (l[this.name] = [l[this.name]]), l[this.name].push(this.value || "")) : l[this.name] = this.value || ""
            });
            l.delete_remote ? jQuery("#syllab-delete-waitwarning").find(".syllab-deleting-remote").show() : jQuery("#syllab-delete-waitwarning").find(".syllab-deleting-remote").hide();
            jQuery("#syllab-delete-waitwarning").slideDown().addClass("active");
            l.remote_delete_limit = syllablion.remote_delete_limit;
            delete l.action;
            delete l.subaction;
            delete l.nonce;
            syllab_send_command("deleteset", l, function(t) {
                if (t.hasOwnProperty("result") && null != t.result) {
                    if ("error" == t.result) jQuery("#syllab-delete-waitwarning").slideUp(), alert(syllablion.error + " " + t.message);
                    else if ("continue" == t.result) {
                        o = o + t.backup_local + t.backup_remote, d += t.backup_local, u += t.backup_remote, i += t.backup_sets;
                        for (var e = t.deleted_timestamps.split(","), a = 0; a < e.length; a++) {
                            var r = e[a];
                            jQuery("#syllab-navtab-backups-content .syllab_existing_backups_row_" + r).slideUp().remove()
                        }
                        jQuery("#syllab_delete_timestamp").val(t.timestamps), jQuery("#syllab-deleted-files-total").text(o + " " + syllablion.remote_files_deleted), n(o, d, u, i)
                    } else if ("success" == t.result) {
                        setTimeout(function() {
                            jQuery("#syllab-deleted-files-total").text(""), jQuery("#syllab-delete-waitwarning").slideUp()
                        }, 500), update_backupnow_modal(t), t.hasOwnProperty("backupnow_file_entities") && (impossible_increment_entities = t.backupnow_file_entities), t.hasOwnProperty("count_backups") && jQuery("#syllab-existing-backups-heading").html(syllablion.existing_backups + ' <span class="syllab_existing_backups_count">' + t.count_backups + "</span>");
                        for (var a = 0; a < s.length; a++) {
                            var r = s[a];
                            jQuery("#syllab-navtab-backups-content .syllab_existing_backups_row_" + r).slideUp().remove()
                        }
                        syllab_backups_selection.checkSelectionStatus(), syllab_history_lastchecksum = !1, d += t.backup_local, u += t.backup_remote, i += t.backup_sets, "" != t.error_messages && (p = syllablion.delete_error_log_prompt), setTimeout(function() {
                            alert(t.set_message + " " + i + "\n" + t.local_message + " " + d + "\n" + t.remote_message + " " + u + "\n\n" + t.error_messages + "\n" + p)
                        }, 900)
                    }
                } else jQuery("#syllab-delete-waitwarning").slideUp()
            })
        }(0, 0, 0, 0)
    }, p[syllablion.cancel] = function() {
        jQuery(this).dialog("close")
    }, jQuery("#syllab-delete-modal").dialog({
        autoOpen: !1,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).css("minHeight", 83)
        },
        modal: !0,
        buttons: p
    });
    var l = {
        initialized: !1,
        init: function() {
            this.initialized || (this.initialized = !0, m(".syllab-restore--cancel").on("click", function(t) {
                t.preventDefault(), this.close()
            }.bind(this)), this.default_next_text = m(".syllab-restore--next-step").eq(0).text(), m(".syllab-restore--next-step").on("click", function(t) {
                t.preventDefault(), this.process_next_action()
            }.bind(this)))
        },
        close: function() {
            m(".syllab_restore_container").hide(), m("body").removeClass("syllab-modal-is-opened")
        },
        open: function() {
            this.init(), m("#syllab-restore-modal-stage1").show(), m("#syllab-restore-modal-stage2").hide(), m("#syllab-restore-modal-stage2a").html(""), m(".syllab-restore--next-step").text(this.default_next_text), m(".syllab-restore--stages li").removeClass("active").first().addClass("active"), m(".syllab_restore_container").show(), m("body").addClass("syllab-modal-is-opened")
        },
        process_next_action: function() {
            var r = 0,
                n = 0,
                o = 0,
                d = [],
                u = 0,
                i = m("#syllab_restore_meta_foreign").val();
            if (m('input[name="syllab_restore[]"]').each(function(t, e) {
                    var a;
                    m(e).is(":checked") && !m(e).is(":disabled") && (r = 1, a = m(e).data("howmany"), "more" == (e = m(e).val()) && (n = 1), "db" == e && (o = 1), (1 == i || 2 == i && "db" != e) && ("wpcore" != e && (a = m("#syllab_restore_form #syllab_restore_wpcore").data("howmany")), e = "wpcore"), "wpcore" == e && 0 != u || (a = [e, a], d.push(a), "wpcore" == e && (u = 1)))
                }), 1 == r) {
                if (1 == syllab_restore_stage) {
                    m(".syllab-restore--stages li").removeClass("active").eq(1).addClass("active"), m("#syllab-restore-modal-stage1").slideUp("slow"), m("#syllab-restore-modal-stage2").show(), syllab_restore_stage = 2;
                    var a = m(".syllab_restore_date").first().text(),
                        s = d,
                        p = m("#syllab_restore_timestamp").val();
                    try {
                        m(".syllab-restore--next-step").prop("disabled", !0), m("#syllab-restore-modal-stage2a").html('<span class="dashicons dashicons-update rotate"></span> ' + syllablion.maybe_downloading_entities), syllab_send_command("whichdownloadsneeded", {
                            downloads: d,
                            timestamp: p
                        }, function(t) {
                            if (m(".syllab-restore--next-step").prop("disabled", !1), t.hasOwnProperty("downloads") && (console.log("SyllabPlus: items which still require downloading follow"), s = t.downloads, console.log(s)), 0 == s.length) syllab_restorer_checkstage2(0);
                            else
                                for (var e = 0; e < s.length; e++) syllab_downloader("udrestoredlstatus_", p, s[e][0], "#ud_downloadstatus2", s[e][1], a, !1)
                        }, {
                            alert_on_error: !1,
                            error_callback: function(t, e, a, r) {
                                void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), m("#syllab-restore-modal-stage2a").html('<p style="color:red;">' + r.fatal_error_message + "</p>")) : (a = "syllab_send_command: error: " + e + " (" + a + ")", m("#syllab-restore-modal-stage2a").html('<p style="color:red; margin: 5px;">' + a + "</p>"), console.log(a), console.log(t))
                            }
                        })
                    } catch (t) {
                        console.log("SyllabPlus: error (follows) when looking for items needing downloading"), console.log(t), alert(syllablion.jsonnotunderstood)
                    }
                } else if (2 == syllab_restore_stage) syllab_restorer_checkstage2(1);
                else if (3 == syllab_restore_stage) {
                    var l = 1;
                    if (jQuery(".syllab-restore--next-step, .syllab-restore--cancel").prop("disabled", !0), m("#syllab_restoreoptions_ui input.required").each(function(t) {
                            var e, a;
                            0 != l && ("" == (e = m(this).val()) ? (alert(syllablion.pleasefillinrequired), l = 0) : "" != m(this).attr("pattern") && (a = m(this).attr("pattern"), new RegExp(a, "g").test(e) || (alert(m(this).data("invalidpattern")), l = 0)))
                        }), 1 == o && (r = 0, jQuery('input[name="syllab_restore_table_options[]"').each(function(t, e) {
                            jQuery(e).is(":checked") && !jQuery(e).is(":disabled") && (r = 1)
                        }), 0 == r && !skipped_db_scan)) return alert(syllablion.youdidnotselectany), void jQuery(".syllab-restore--next-step, .syllab-restore--cancel").prop("disabled", !1);
                    if (1 == n && (r = 0, jQuery('input[name="syllab_include_more_index[]"').each(function(t, e) {
                            jQuery(e).is(":checked") && !jQuery(e).is(":disabled") && (r = 1, "" == jQuery("#syllab_include_more_path_restore" + t).val() && alert(syllablion.emptyrestorepath))
                        }), 0 == r)) return alert(syllablion.youdidnotselectany), void jQuery(".syllab-restore--next-step, .syllab-restore--cancel").prop("disabled", !1);
                    if (l) {
                        var _ = m("#syllab_restoreoptions_ui select, #syllab_restoreoptions_ui input").serialize();
                        if (jQuery.each(jQuery('input[name="syllab_restore_table_options[]').filter(function(t) {
                                return !1 === jQuery(this).prop("checked")
                            }), function(t, e) {
                                _ += "&" + jQuery(e).attr("name") + "=slp-skip-table-" + jQuery(e).val()
                            }), console.log("Restore options: " + _), void 0 !== php_max_input_vars) {
                            var t = _.split("&").length,
                                e = '<div class="notice notice-warning"><p><span class="dashicons dashicons-warning"></span> <strong>' + syllablion.warnings + '</strong></p><ul id="syllab_restore_warnings">';
                            if (!php_max_input_vars && 1e3 <= t) console.log("Restore options: " + t + " PHP max input vars not detected; using default: 1000");
                            else if (php_max_input_vars && php_max_input_vars <= t) {
                                var c = "<li>" + syllablion.php_max_input_vars_detected_warning + "</li>";
                                return 1 != jQuery("#syllab-restore-modal-stage2a .notice-warning").length ? (e = e + c + "</ul></div>", jQuery("#syllab_restoreoptions_ui").prepend(e)) : jQuery("#syllab-restore-modal-stage2a #syllab_restore_warnings").append(c), console.log("Restore options: " + t + " PHP max input vars: " + php_max_input_vars), jQuery(".syllab-restore--next-step, .syllab-restore--cancel").prop("disabled", !1), void(php_max_input_vars = void 0)
                            }
                        }
                        m("#syllab_restorer_restore_options").val(_), m("#syllab-restore-modal-stage2a").html(syllablion.restore_proceeding), m("#syllab_restore_form").trigger("submit"), syllab_restore_stage = 4
                    }
                }
            } else alert(syllablion.youdidnotselectany)
        }
    };
    jQuery("#syllab-iframe-modal").dialog({
        autoOpen: !1,
        height: 500,
        width: 780,
        modal: !0
    }), jQuery("#syllab-backupnow-inpage-modal").dialog({
        autoOpen: !1,
        modal: !0,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).dialog("option", "width", 580), m(this).dialog("option", "minHeight", 261), m(this).dialog("option", "height", 380)
        }
    });
    var _, p = {};
    p[syllablion.backupnow] = function() {
        var t = jQuery("#backupnow_includedb").is(":checked") ? 0 : 1,
            e = jQuery("#backupnow_includefiles").is(":checked") ? 0 : 1,
            a = jQuery("#backupnow_includecloud").is(":checked") ? 0 : 1,
            r = jQuery("#backupnow_db_anon_all").is(":checked") ? 1 : 0,
            n = jQuery("#backupnow_db_anon_non_staff").is(":checked") ? 1 : 0,
            o = backupnow_whichtables_checked(""),
            d = jQuery("#always_keep").is(":checked") ? 1 : 0,
            u = "incremental" == jQuery("#syllab-backupnow-modal").data("backup-type") ? 1 : 0;
        if (!syllablion.hosting_restriction.includes("only_one_backup_per_month") || u)
            if (syllablion.hosting_restriction.includes("only_one_incremental_per_day") && u) alert(syllablion.hosting_restriction_one_incremental_perday);
            else {
                if ("" == o && 0 == t) return alert(syllablion.notableschosen), void jQuery("#backupnow_database_moreoptions").show();
                "boolean" == typeof o && (o = null);
                var i = backupnow_whichfiles_checked("");
                if ("" == i && 0 == e) return alert(syllablion.nofileschosen), void jQuery("#backupnow_includefiles_moreoptions").show();
                var s = jQuery("input[name^='syllab_include_remote_service_']").serializeArray();
                if ("" == s && 0 == a) return alert(syllablion.nocloudserviceschosen), void jQuery("#backupnow_includecloud_moreoptions").show();
                "boolean" == typeof s && (s = null), t && e ? alert(syllablion.excludedeverything) : (jQuery(this).dialog("close"), setTimeout(function() {
                    jQuery("#syllab_lastlogmessagerow").fadeOut("slow", function() {
                        jQuery(this).fadeIn("slow")
                    })
                }, 1700), syllab_backupnow_go(t, e, a, i, {
                    always_keep: d,
                    incremental: u,
                    db_anon_all: r,
                    db_anon_non_staff: n
                }, jQuery("#backupnow_label").val(), o, s))
            }
        else alert(syllablion.hosting_restriction_one_backup_permonth)
    }, p[syllablion.cancel] = function() {
        jQuery(this).dialog("close")
    }, jQuery("#syllab-backupnow-modal").dialog({
        autoOpen: !1,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).dialog("option", "width", 610), m(this).dialog("option", "minHeight", 300), m(this).dialog("option", "height", 472)
        },
        modal: !0,
        buttons: p,
        create: function() {
            m(this).closest(".ui-dialog").find(".ui-dialog-buttonpane .ui-button").first().addClass("js-tour-backup-now-button")
        }
    }), jQuery("#syllab-poplog").dialog({
        autoOpen: !1,
        modal: !0,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).dialog("option", "width", 860), m(this).dialog("option", "minHeight", 260), 600 < m(window).height() ? m(this).dialog("option", "height", 600) : m(this).dialog("option", "height", m(window).height() - 50)
        }
    }), jQuery("#syllab-navtab-settings-content .enableexpertmode").on("click", function() {
        return jQuery("#syllab-navtab-settings-content .expertmode").fadeIn(), jQuery("#syllab-navtab-settings-content .enableexpertmode").off("click"), !1
    }), jQuery("#syllab-navtab-settings-content .backupdirrow").on("click", "a.syllab_backup_dir_reset", function() {
        return jQuery("#syllab_dir").val("syllab"), !1
    }), jQuery("#syllab-navtab-settings-content .syllab_include_entity").on("click", function() {
        var t, e = jQuery(this).data("toggle_exclude_field");
        e && (t = e, e = !1, jQuery("#syllab-navtab-settings-content #syllab_include_" + t).is(":checked") ? e ? jQuery("#syllab-navtab-settings-content #syllab_include_" + t + "_exclude_container").show() : jQuery("#syllab-navtab-settings-content #syllab_include_" + t + "_exclude_container").slideDown() : e ? jQuery("#syllab-navtab-settings-content #syllab_include_" + t + "_exclude").hide() : jQuery("#syllab-navtab-settings-content #syllab_include_" + t + "_exclude_container").slideUp())
    }), jQuery(".syllab_exclude_entity_container").on("click", ".syllab_exclude_entity_delete", function(t) {
        t.preventDefault(), confirm(syllablion.exclude_rule_remove_conformation_msg) && (t = jQuery(this).data("include-backup-file"), jQuery.when(jQuery(this).closest(".syllab_exclude_entity_wrapper").remove()).then(syllab_exclude_entity_update(t)))
    }), jQuery(".syllab_exclude_entity_container").on("click", ".syllab_exclude_entity_edit", function(t) {
        t.preventDefault();
        var e = jQuery(this).hide().closest(".syllab_exclude_entity_wrapper"),
            a = e.find("input");
        a.prop("readonly", !1).trigger("focus");
        t = a.val();
        a.val(""), a.val(t), e.find(".syllab_exclude_entity_update").addClass("is-active").show()
    }), jQuery(".syllab_exclude_entity_container").on("click", ".syllab_exclude_entity_update", function(t) {
        t.preventDefault();
        var e = jQuery(this).closest(".syllab_exclude_entity_wrapper"),
            a = jQuery(this).data("include-backup-file"),
            r = e.find("input").val().trim(),
            t = !1;
        (t = r == e.find("input").data("val") || syllab_is_unique_exclude_rule(r, a) ? !0 : t) && (jQuery(this).hide().removeClass("is-active"), jQuery.when(e.find("input").prop("readonly", "readonly").data("val", r)).then(function() {
            e.find(".syllab_exclude_entity_edit").show(), syllab_exclude_entity_update(a)
        }))
    }), jQuery("#syllab_exclude_modal").dialog({
        autoOpen: !1,
        modal: !0,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).parent().trigger("focus"), m(this).dialog("option", "width", 520), m(this).dialog("option", "minHeight", 260), 579 < m(window).height() ? m(this).css("height", "auto") : m(window).height() < 580 && 410 < m(window).height() ? (m(this).dialog("option", "height", 410), m(this).css("height", "auto")) : m(this).dialog("option", "height", m(window).height() - 20)
        }
    }), jQuery(".syllab_exclude_container .syllab_add_exclude_item").on("click", function(t) {
        t.preventDefault();
        t = jQuery(this).data("include-backup-file");
        jQuery("#syllab_exclude_modal_for").val(t), jQuery("#syllab_exclude_modal_path").val(jQuery(this).data("path")), "uploads" == t && jQuery("#syllab-exclude-file-dir-prefix").html(jQuery("#syllab-exclude-upload-base-dir").val()), jQuery(".syllab-exclude-modal-reset").trigger("click"), jQuery("#syllab_exclude_modal").dialog("open")
    }), jQuery(".syllab-exclude-link").on("click", function(t) {
        t.preventDefault();
        t = jQuery(this).data("panel");
        "file-dir" == t ? jQuery("#syllab_exclude_files_folders_jstree").jstree({
            core: {
                multiple: !1,
                data: function(t, e) {
                    syllab_send_command("get_jstree_directory_nodes", {
                        entity: "filebrowser",
                        node: t,
                        path: jQuery("#syllab_exclude_modal_path").val(),
                        findex: 0,
                        skip_root_node: !0
                    }, function(t) {
                        t.hasOwnProperty("error") ? alert(t.error) : e.call(this, t.nodes)
                    }, {
                        error_callback: function(t, e, a, r) {
                            void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), jQuery("#syllab_zip_files_jstree").html('<p style="color:red; margin: 5px;">' + r.fatal_error_message + "</p>"), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", jQuery("#syllab_zip_files_jstree").html('<p style="color:red; margin: 5px;">' + a + "</p>"), console.log(a), alert(a), console.log(t))
                        }
                    })
                },
                error: function(t) {
                    alert(t), console.log(t)
                }
            },
            search: {
                show_only_matches: !0
            },
            plugins: ["sort"]
        }) : "contain-clause" == t && jQuery("#syllab_exclude_files_folders_wildcards_jstree").jstree({
            core: {
                multiple: !1,
                data: function(t, e) {
                    syllab_send_command("get_jstree_directory_nodes", {
                        entity: "filebrowser",
                        directories_only: 1,
                        node: t,
                        path: jQuery("#syllab_exclude_modal_path").val(),
                        findex: 0,
                        skip_root_node: 0
                    }, function(t) {
                        t.hasOwnProperty("error") ? alert(t.error) : e.call(this, t.nodes)
                    }, {
                        error_callback: function(t, e, a, r) {
                            void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), jQuery("#syllab_zip_files_jstree").html('<p style="color:red; margin: 5px;">' + r.fatal_error_message + "</p>"), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", jQuery("#syllab_zip_files_jstree").html('<p style="color:red; margin: 5px;">' + a + "</p>"), console.log(a), alert(a), console.log(t))
                        }
                    })
                },
                error: function(t) {
                    alert(t), console.log(t)
                }
            },
            search: {
                show_only_matches: !0
            },
            plugins: ["sort"]
        }), jQuery("#syllab_exclude_modal_main").slideUp(), jQuery(".syllab-exclude-panel").hide(), jQuery(".syllab-exclude-panel[data-panel=" + t + "]").slideDown()
    }), jQuery(".syllab-exclude-modal-reset").on("click", function(t) {
        t.preventDefault(), jQuery("#syllab_exclude_files_folders_jstree").jstree("destroy"), jQuery("#syllab_exclude_files_folders_wildcards_jstree").jstree("destroy"), jQuery("#syllab_exclude_extension_field").val(""), jQuery("#syllab_exclude_prefix_field").val(""), jQuery(".syllab-exclude-panel").slideUp(), jQuery("#syllab_exclude_modal_main").slideDown()
    }), jQuery(".syllab-exclude-submit").on("click", function() {
        var t, e = "";
        switch (jQuery(this).data("panel")) {
            case "file-dir":
                if (0 == (t = jQuery("#syllab_exclude_files_folders_jstree").jstree("get_selected")).length) return void alert(syllablion.exclude_select_file_or_folder_msg);
                var a = t[0],
                    r = jQuery("#syllab_exclude_modal_path").val(),
                    e = a = "/" == (a = "/" == (a = a.substr(0, r.length) == r ? a.substr(r.length, a.length) : a).charAt(0) ? a.substr(1) : a).charAt(a.length - 1) ? a.substr(0, a.length - 1) : a;
                break;
            case "extension":
                var n = jQuery("#syllab_exclude_extension_field").val();
                if ("" == n) return void alert(syllablion.exclude_type_ext_msg);
                if (!n.match(/^[0-9a-zA-Z]+$/)) return void alert(syllablion.exclude_ext_error_msg);
                e = "ext:" + n;
                break;
            case "begin-with":
                var o = jQuery("#syllab_exclude_prefix_field").val();
                if ("" == o) return void alert(syllablion.exclude_type_prefix_msg);
                if (!o.match(/^\s*[a-z-_\d,\s]+\s*$/i)) return void alert(syllablion.exclude_prefix_error_msg);
                e = "prefix:" + o;
                break;
            case "contain-clause":
                if (0 == (t = jQuery("#syllab_exclude_files_folders_wildcards_jstree").jstree("get_selected")).length) return void alert(syllablion.exclude_select_folder_wildcards_msg);
                n = jQuery(this).parents("div.syllab-exclude-panel").find("div.clause-input-container input").val();
                jQuery(this).parents("div.syllab-exclude-panel").find("div.clause-input-container input").val("");
                o = jQuery(this).parents("div.syllab-exclude-panel").find("div.clause-input-container select").val();
                if ("" == n) return void alert(syllablion.exclude_contain_error_msg);
                jQuery(this).parents("div.syllab-exclude-panel").find("div.clause-input-container select option").eq(0).prop("selected", !0);
                a = t[0], r = jQuery("#syllab_exclude_modal_path").val();
                "" !== (e = a = "/" == (a = "/" == (a = a.substr(0, r.length) == r ? a.substr(r.length, a.length) : a).charAt(0) ? a.substr(1) : a).charAt(a.length - 1) ? a.substr(0, a.length - 1) : a) && (e += "/"), n = n.replace(/\*/g, "\\*"), "beginning" === o ? e += n + "*" : "middle" === o ? e += "*" + n + "*" : "end" === o && (e += "*" + n);
                break;
            default:
                return
        }
        var d, u = jQuery("#syllab_exclude_modal_for").val();
        syllab_is_unique_exclude_rule(e, u) && (d = '<div class="syllab_exclude_entity_wrapper"><input type="text" class="syllab_exclude_entity_field syllab_include_' + u + '_exclude_entity" name="syllab_include_' + u + '_exclude_entity[]" value="' + e + '" data-val="' + e + '" data-include-backup-file="' + u + '" readonly="readonly"><a href="#" class="syllab_exclude_entity_edit dashicons dashicons-edit" data-include-backup-file="' + u + '"></a><a href="#" class="syllab_exclude_entity_update dashicons dashicons-yes" data-include-backup-file="' + u + '" style="display: none;"></a><a href="#" class="syllab_exclude_entity_delete dashicons dashicons-no" data-include-backup-file="' + u + '"></a></div>', jQuery('.syllab_exclude_entity_container[data-include-backup-file="' + u + '"]').append(d), syllab_exclude_entity_update(u), jQuery("#syllab_exclude_modal").dialog("close"))
    }), jQuery("#syllab-navtab-settings-content .syllab-service").on("change", function() {
        var t = jQuery(this).val();
        jQuery("#syllab-navtab-settings-content .syllabplusmethod").hide(), jQuery("#syllab-navtab-settings-content ." + t).show()
    }), jQuery("#syllab-navtab-settings-content a.syllab_show_decryption_widget").on("click", function(t) {
        t.preventDefault(), jQuery("#syllabplus_db_decrypt").val(jQuery("#syllab_encryptionphrase").val()), jQuery("#syllab-manualdecrypt-modal").slideToggle()
    }), jQuery("#syllabplus-phpinfo").on("click", function(t) {
        t.preventDefault(), syllab_iframe_modal("phpinfo", syllablion.phpinfo)
    }), jQuery("#syllabplus-rawbackuphistory").on("click", function(t) {
        t.preventDefault(), syllab_iframe_modal("rawbackuphistory", syllablion.raw)
    }), jQuery("#syllab-navtab-status").on("click", function(t) {
        t.preventDefault(), syllab_open_main_tab("status"), syllab_page_is_visible = 1, syllab_console_focussed_tab = "status", syllab_activejobs_update(!0)
    }), jQuery("#syllab-navtab-expert").on("click", function(t) {
        t.preventDefault(), syllab_open_main_tab("expert"), syllab_page_is_visible = 1
    }), jQuery("#syllab-navtab-settings, #syllab-navtab-settings2, #syllab_backupnow_gotosettings").on("click", function(t) {
        t.preventDefault(), jQuery(this).parents(".syllabmessage").remove(), jQuery("#syllab-backupnow-modal").dialog("close"), syllab_open_main_tab("settings"), syllab_page_is_visible = 1
    }), jQuery("#syllab-navtab-addons").on("click", function(t) {
        t.preventDefault(), jQuery(this).addClass("b#nav-tab-active"), syllab_open_main_tab("addons"), syllab_page_is_visible = 1
    }), jQuery("#syllab-navtab-backups").on("click", function(t) {
        t.preventDefault(), syllab_console_focussed_tab = "backups", syllab_historytimertoggle(1), syllab_open_main_tab("backups")
    }), jQuery("#syllab-navtab-migrate").on("click", function(t) {
        t.preventDefault(), jQuery("#syllab_migrate_tab_alt").html("").hide(), syllab_open_main_tab("migrate"), syllab_page_is_visible = 1, jQuery("#syllab_migrate .syllab_migrate_widget_module_content").is(":visible") || jQuery(".syllab_migrate_intro").show()
    }), "migrate" == syllablion.tab && jQuery("#syllab-navtab-migrate").trigger("click"), syllab_send_command("ping", null, function(t, e) {
        "success" == e && "pong" != t && 0 <= t.indexOf("pong") && (jQuery("#syllab-navtab-backups-content .ud-whitespace-warning").show(), console.log("SyllabPlus: Extra output warning: response (which should be just (string)'pong') follows."), console.log(t))
    }, {
        json_parse: !1,
        type: "GET"
    });
    try {
        "undefined" != typeof syllab_plupload_config && ((_ = new plupload.Uploader(syllab_plupload_config)).bind("Init", function(t) {
            var e = jQuery("#plupload-upload-ui");
            t.features.dragdrop ? (e.addClass("drag-drop"), jQuery("#drag-drop-area").on("dragover.wp-uploader", function() {
                e.addClass("drag-over")
            }).on("dragleave.wp-uploader, drop.wp-uploader", function() {
                e.removeClass("drag-over")
            })) : (e.removeClass("drag-drop"), jQuery("#drag-drop-area").off(".wp-uploader"))
        }), _.init(), _.bind("FilesAdded", function(t, e) {
            plupload.each(e, function(t) {
                if (!/^backup_([\-0-9]{15})_.*_([0-9a-f]{12})-[\-a-z]+([0-9]+?)?(\.(zip|gz|gz\.crypt))?$/i.test(t.name) && !/^log\.([0-9a-f]{12})\.txt$/.test(t.name)) {
                    for (var e = !1, a = 0; a < syllab_accept_archivename.length; a++) syllab_accept_archivename[a].test(t.name) && (e = !0);
                    if (!e) return /\.(zip|tar|tar\.gz|tar\.bz2)$/i.test(t.name) || /\.sql(\.gz)?$/i.test(t.name) ? (jQuery("#syllab-message-modal-innards").html("<p><strong>" + t.name + "</strong></p> " + syllablion.notarchive2), jQuery("#syllab-message-modal").dialog("open")) : alert(t.name + ": " + syllablion.notarchive), void _.removeFile(t)
                }
                jQuery("#filelist").append('<div class="file" id="' + t.id + '"><b>' + t.name + "</b> (<span>" + plupload.formatSize(0) + "</span>/" + plupload.formatSize(t.size) + ') <div class="fileprogress"></div></div>')
            }), t.refresh(), t.start()
        }), _.bind("UploadProgress", function(t, e) {
            jQuery("#" + e.id + " .fileprogress").width(e.percent + "%"), jQuery("#" + e.id + " span").html(plupload.formatSize(parseInt(e.size * e.percent / 100))), e.size == e.loaded && (jQuery("#" + e.id).html('<div class="file" id="' + e.id + '"><b>' + e.name + "</b> (<span>" + plupload.formatSize(parseInt(e.size * e.percent / 100)) + "</span>/" + plupload.formatSize(e.size) + ") - " + syllablion.complete + "</div>"), jQuery("#" + e.id + " .fileprogress").width(e.percent + "%"))
        }), _.bind("Error", function(t, e) {
            console.log(e);
            var a = "-200" == e.code ? "\n" + syllablion.makesure2 : syllablion.makesure,
                r = syllablion.uploaderr + " (code " + e.code + ") : " + e.message;
            e.hasOwnProperty("status") && e.status && (r += " (" + syllablion.http_code + " " + e.status + ")"), e.hasOwnProperty("response") && (console.log("SyllabPlus: plupload error: " + e.response), e.response.length < 100 && (r += " " + syllablion.error + " " + e.response + "\n")), r += " " + a, alert(r)
        }), _.bind("FileUploaded", function(t, e, a) {
            if ("200" == a.status) try {
                resp = ud_parse_json(a.response), resp.e ? alert(syllablion.uploaderror + " " + resp.e) : resp.dm ? (alert(resp.dm), syllab_updatehistory(1, 0)) : resp.m ? syllab_updatehistory(1, 0) : alert("Unknown server response: " + a.response)
            } catch (t) {
                console.log(a), alert(syllablion.jsonnotunderstood)
            } else alert("Unknown server response status: " + a.code), console.log(a)
        }))
    } catch (t) {
        console.log(t)
    }

    function c(t) {
        params = {
            uri: jQuery("#syllabplus_httpget_uri").val()
        }, params.curl = t, syllab_send_command("httpget", params, function(t) {
            t.e && alert(t.e), t.r ? jQuery("#syllabplus_httpget_results").html("<pre>" + t.r + "</pre>") : console.log(t)
        }, {
            type: "GET"
        })
    }

    function f(t, e, a) {
        syllab_restore_setoptions(t), jQuery("#syllab_restore_timestamp").val(e), jQuery(".syllab_restore_date").html(a), syllab_restore_stage = 1, l.open(), syllab_activejobs_update(!0)
    }

    function g(t) {
        t = t.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
        t = new RegExp("[\\?&]" + t + "=([^&#]*)").exec(window.location.href);
        return null == t ? "" : decodeURIComponent(t[1].replace(/\+/g, " "))
    }
    jQuery("#syllabplus_httpget_go").on("click", function(t) {
        t.preventDefault(), c(0)
    }), jQuery("#syllabplus_httpget_gocurl").on("click", function(t) {
        t.preventDefault(), c(1)
    }), jQuery("#syllabplus_callwpaction_go").on("click", function(t) {
        t.preventDefault(), params = {
            wpaction: jQuery("#syllabplus_callwpaction").val()
        }, syllab_send_command("call_wordpress_action", params, function(t) {
            t.e ? alert(t.e) : t.s || (t.r ? jQuery("#syllabplus_callwpaction_results").html(t.r) : (console.log(t), alert(syllablion.jsonnotunderstood)))
        })
    }), jQuery("#syllab_activejobs_table, #syllab-navtab-migrate-content").on("click", ".syllab_jobinfo_delete", function(t) {
        t.preventDefault();
        t = jQuery(this).data("jobid");
        t ? (m(this).addClass("disabled"), syllab_activejobs_delete(t)) : console.log("SyllabPlus: A stop job link was clicked, but the Job ID could not be found")
    }), jQuery("#syllab_activejobs_table, #syllab-navtab-backups-content .syllab_existing_backups, #syllab-backupnow-inpage-modal, #syllab-navtab-migrate-content").on("click", ".syllab-log-link", function(t) {
        t.preventDefault();
        var e = jQuery(this).data("fileid"),
            t = jQuery(this).data("jobid");
        e ? syllab_popuplog(e) : t ? syllab_popuplog(t) : console.log("SyllabPlus: A log link was clicked, but the Job ID could not be found")
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("click", "button.choose-components-button", function(t) {
        f(jQuery(this).data("entities"), jQuery(this).data("backup_timestamp"), jQuery(this).data("showdata"))
    }), "initiate_restore" == g("udaction") && f(g("entities"), g("backup_timestamp"), g("showdata"));
    p = {};
    p[syllablion.uploadbutton] = function() {
        var t = jQuery("#syllab_upload_timestamp").val(),
            e = jQuery("#syllab_upload_nonce").val(),
            a = "",
            r = !1;
        jQuery(".syllab_remote_storage_destination").each(function(t) {
            jQuery(this).is(":checked") && (r = !0)
        }), r ? (a = jQuery("input[name^='syllab_remote_storage_destination_']").serializeArray(), jQuery(this).dialog("close"), alert(syllablion.local_upload_started), syllab_send_command("upload_local_backup", {
            use_nonce: e,
            use_timestamp: t,
            services: a
        }, function(t) {})) : jQuery("#syllab-upload-modal-error").html(syllablion.local_upload_error)
    }, p[syllablion.cancel] = function() {
        jQuery(this).dialog("close")
    }, jQuery("#syllab-upload-modal").dialog({
        autoOpen: !1,
        modal: !0,
        resizeOnWindowResize: !0,
        scrollWithViewport: !0,
        resizeAccordingToViewport: !0,
        useContentSize: !1,
        open: function(t, e) {
            m(this).parent().trigger("focus"), m(this).dialog("option", "width", 308), 460 < jQuery(window).height() ? (m(this).dialog("option", "height", 218), m(this).css("height", "auto")) : 250 < jQuery(window).height() && jQuery(window).height() < 461 ? (m(this).dialog("option", "height", 460), m(this).css("height", "auto")) : m(this).dialog("option", "height", jQuery(window).height() - 20)
        },
        buttons: p
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("click", "button.syllab-upload-link", function(t) {
        t.preventDefault();
        var e = jQuery(this).data("nonce").toString(),
            a = jQuery(this).data("key").toString(),
            t = jQuery(this).data("services").toString();
        e ? function(t, e, a) {
            jQuery("#syllab_upload_timestamp").val(t), jQuery("#syllab_upload_nonce").val(e);
            var r = a.split(",");
            jQuery(".syllab_remote_storage_destination").each(function(t) {
                var e = jQuery(this).val(); - 1 == jQuery.inArray(e, r) && (jQuery(this).prop("checked", !1), jQuery(this).prop("disabled", !0), e = m(this).prop("labels"), jQuery(e).append(" " + syllablion.already_uploaded))
            }), jQuery("#syllab-upload-modal").dialog("open")
        }(a, e, t) : console.log("SyllabPlus: A upload link was clicked, but the Job ID could not be found")
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("click", ".syllab-load-more-backups", function(t) {
        t.preventDefault(), syllab_updatehistory(0, 0, 0, parseInt(jQuery("#syllab-navtab-backups-content .syllab_existing_backups .syllab_existing_backups_row").length) + parseInt(syllablion.existing_backups_limit))
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("click", ".syllab-load-all-backups", function(t) {
        t.preventDefault(), syllab_updatehistory(0, 0, 0, 9999999)
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("click", ".syllab-delete-link", function(t) {
        t.preventDefault();
        var e = jQuery(this).data("hasremote"),
            a = jQuery(this).data("nonce").toString(),
            t = jQuery(this).data("key").toString();
        a ? syllab_delete(t, a, e) : console.log("SyllabPlus: A delete link was clicked, but the Job ID could not be found")
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("click", "button.syllab_download_button", function(t) {
        t.preventDefault();
        syllab_downloader("uddlstatus_", jQuery(this).data("backup_timestamp"), jQuery(this).data("what"), ".ud_downloadstatus", jQuery(this).data("set_contents"), jQuery(this).data("prettydate"), !0)
    }), jQuery("#syllab-navtab-backups-content .syllab_existing_backups").on("dblclick", ".syllab_existingbackup_date", function(t) {
        t.preventDefault();
        t = jQuery(this).data("nonce").toString();
        syllab_send_command("rawbackup_history", {
            timestamp: jQuery(this).data("timestamp").toString(),
            nonce: t
        }, function(t) {
            var e = document.createElement("textarea");
            e.innerHTML = t, syllab_html_modal(e.value, syllablion.raw, 780, 500)
        }, {
            type: "POST",
            json_parse: !1
        }), syllab_html_modal('<div style="margin:auto;text-align:center;margin-top:150px;"><img src="' + syllablion.ud_url + '/images/udlogo-rotating.gif" /> <br>' + syllablion.loading + "</div>", syllablion.raw, 780, 500)
    }), jQuery("#backupnow_database_moreoptions").on("click", "div.backupnow-db-tables > a", function(t) {
        t.preventDefault(), jQuery("> input", jQuery(this).parents("div.backupnow-db-tables")).prop("checked", !1), jQuery(this).hasClass("backupnow-select-all-table") ? jQuery("> input", jQuery(this).parents("div.backupnow-db-tables")).prop("checked", !0) : jQuery(this).hasClass("backupnow-select-all-this-site") && jQuery("> input", jQuery(this).parents("div.backupnow-db-tables")).not("[data-non_wp_table]").prop("checked", !0)
    })
}), jQuery(function(n) {
    var o = "#syllab-navtab-settings-content ";
    n(o + "#remote-storage-holder").on("click", ".syllabvault_backtostart", function(t) {
        t.preventDefault(), n(o + "#syllabvault_settings_showoptions").slideUp(), n(o + "#syllabvault_settings_connect").slideUp(), n(o + "#syllabvault_settings_connected").slideUp(), n(o + "#syllabvault_settings_default").slideDown()
    }), n(o).on("keypress", "#syllabvault_settings_connect input", function(t) {
        if (13 == t.which) return n(o + "#syllabvault_connect_go").trigger("click"), !1
    }), n(o + "#remote-storage-holder").on("click", "#syllabvault_recountquota", function(t) {
        t.preventDefault(), n(o + "#syllabvault_recountquota").html(syllablion.counting);
        try {
            syllab_send_command("vault_recountquota", {
                instance_id: n("#syllabvault_settings_connect").data("instance_id")
            }, function(t) {
                n(o + "#syllabvault_recountquota").html(syllablion.updatequotacount), t.hasOwnProperty("html") && (n(o + "#syllabvault_settings_connected").html(t.html), t.hasOwnProperty("connected") && (t.connected ? (n(o + "#syllabvault_settings_default").hide(), n(o + "#syllabvault_settings_connected").show()) : (n(o + "#syllabvault_settings_connected").hide(), n(o + "#syllabvault_settings_default").show())))
            }, {
                error_callback: function(t, e, a, r) {
                    n(o + "#syllabvault_recountquota").html(syllablion.updatequotacount), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
                }
            })
        } catch (t) {
            n(o + "#syllabvault_recountquota").html(syllablion.updatequotacount), console.log(t)
        }
    }), n(o + "#remote-storage-holder").on("click", "#syllabvault_disconnect", function(t) {
        t.preventDefault(), n(o + "#syllabvault_disconnect").html(syllablion.disconnecting);
        try {
            syllab_send_command("vault_disconnect", {
                immediate_echo: !0,
                instance_id: n("#syllabvault_settings_connect").data("instance_id")
            }, function(t) {
                n(o + "#syllabvault_disconnect").html(syllablion.disconnect), t.hasOwnProperty("html") && (n(o + "#syllabvault_settings_connected").html(t.html).slideUp(), n(o + "#syllabvault_settings_default").slideDown())
            }, {
                error_callback: function(t, e, a, r) {
                    n(o + "#syllabvault_disconnect").html(syllablion.disconnect), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
                }
            })
        } catch (t) {
            n(o + "#syllabvault_disconnect").html(syllablion.disconnect), console.log(t)
        }
    }), n(o + "#remote-storage-holder").on("click", "#syllabvault_connect", function(t) {
        t.preventDefault(), n(o + "#syllabvault_settings_default").slideUp(), n(o + "#syllabvault_settings_connect").slideDown()
    }), n(o + "#remote-storage-holder").on("click", "#syllabvault_showoptions", function(t) {
        t.preventDefault(), n(o + "#syllabvault_settings_default").slideUp(), n(o + "#syllabvault_settings_showoptions").slideDown()
    }), n("#remote-storage-holder").on("keyup", ".syllabplus_onedrive_folder_input", function(t) {
        var e = n(this).val(),
            a = n(this).closest("td");
        0 == e.indexOf("https:") || 0 == e.indexOf("http:") ? a.find(".onedrive_folder_error").length || a.append('<div class="onedrive_folder_error">' + syllablion.onedrive_folder_url_warning + "</div>") : a.find(".onedrive_folder_error").slideUp("slow", function() {
            a.find(".onedrive_folder_error").remove()
        })
    }), n(o + "#remote-storage-holder").on("click", "#syllabvault_connect_go", function(t) {
       // alert(n("#syllabvault_settings_connect").data("instance_id"));
        return n(o + "#syllabvault_connect_go").html(syllablion.connecting), syllab_send_command("vault_connect", {
            email: n("#syllabvault_email").val(),
            pass: n("#syllabvault_pass").val(),
            instance_id: n("#syllabvault_settings_connect").data("instance_id")
        }, function(t, e, a) {
            n(o + "#syllabvault_connect_go").html(syllablion.connect), t.hasOwnProperty("e") ? (syllab_html_modal('<h4 style="margin-top:0px; padding-top:0px;">' + syllablion.errornocolon + "</h4><p>" + t.e + "</p>", syllablion.disconnect, 400, 250), t.hasOwnProperty("code") && "no_quota" == t.code && (n(o + "#syllabvault_settings_connect").slideUp(), n(o + "#syllabvault_settings_default").slideDown())) : t.hasOwnProperty("connected") && t.connected && t.hasOwnProperty("html") ? (n(o + "#syllabvault_settings_connect").slideUp(), n(o + "#syllabvault_settings_connected").html(t.html).slideDown()) : (console.log(t), alert(syllablion.unexpectedresponse + " " + a))
        }, {
            error_callback: function(t, e, a, r) {
                n(o + "#syllabvault_connect_go").html(syllablion.connect), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
            }
        }), !1
    }), n("#syllab-iframe-modal").on("change", "#always_keep_this_backup", function() {
        var e = n(this).data("backup_key");
        syllab_send_command("always_keep_this_backup", {
            backup_key: e,
            always_keep: n(this).is(":checked") ? 1 : 0
        }, function(t) {
            t.hasOwnProperty("rawbackup") && (jQuery("#syllab-iframe-modal").dialog("close"), jQuery(".syllab_existing_backups_row_" + e + " .syllab_existingbackup_date").data("rawbackup", t.rawbackup), syllab_html_modal(jQuery(".syllab_existing_backups_row_" + e + " .syllab_existingbackup_date").data("rawbackup"), syllablion.raw, 780, 500))
        })
    })
}), jQuery(function(t) {
    try {
        "undefined" != typeof syllab_plupload_config2 && ((a = new plupload.Uploader(syllab_plupload_config2)).bind("Init", function(t) {
            var e = jQuery("#plupload-upload-ui2");
            t.features.dragdrop ? (e.addClass("drag-drop"), jQuery("#drag-drop-area2").on("dragover.wp-uploader", function() {
                e.addClass("drag-over")
            }).on("dragleave.wp-uploader, drop.wp-uploader", function() {
                e.removeClass("drag-over")
            })) : (e.removeClass("drag-drop"), jQuery("#drag-drop-area2").off(".wp-uploader"))
        }), a.init(), a.bind("FilesAdded", function(t, e) {
            plupload.each(e, function(t) {
                return /^backup_([\-0-9]{15})_.*_([0-9a-f]{12})-db([0-9]+)?\.(gz\.crypt)$/i.test(t.name) ? void jQuery("#filelist2").append('<div class="file" id="' + t.id + '"><b>' + t.name + "</b> (<span>" + plupload.formatSize(0) + "</span>/" + plupload.formatSize(t.size) + ') <div class="fileprogress"></div></div>') : (alert(t.name + ": " + syllablion.notdba), void a.removeFile(t))
            }), t.refresh(), t.start()
        }), a.bind("UploadProgress", function(t, e) {
            jQuery("#" + e.id + " .fileprogress").width(e.percent + "%"), jQuery("#" + e.id + " span").html(plupload.formatSize(parseInt(e.size * e.percent / 100)))
        }), a.bind("Error", function(t, e) {
            err_makesure = "-200" == e.code ? "\n" + syllablion.makesure2 : syllablion.makesure, alert(syllablion.uploaderr + " (code " + e.code + ") : " + e.message + " " + err_makesure)
        }), a.bind("FileUploaded", function(t, e, a) {
            "200" == a.status ? "ERROR:" == a.response.substring(0, 6) ? alert(syllablion.uploaderror + " " + a.response.substring(6)) : "OK:" == a.response.substring(0, 3) ? (bkey = a.response.substring(3), jQuery("#" + e.id + " .fileprogress").hide(), jQuery("#" + e.id).append(syllablion.uploaded + ' <a href="?page=syllabplus&action=downloadfile&syllabplus_file=' + bkey + "&decrypt_key=" + encodeURIComponent(jQuery("#syllabplus_db_decrypt").val()) + '">' + syllablion.followlink + "</a> " + syllablion.thiskey + " " + jQuery("#syllabplus_db_decrypt").val().replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;"))) : alert(syllablion.unknownresp + " " + a.response) : alert(syllablion.ukrespstatus + " " + a.code)
        }))
    } catch (t) {
        console.log(t)
    }
    var a;
    if (jQuery("#syllab-hidethis").remove(), Handlebars.registerHelper("ifeq", function(t, e, a) {
            return (t = "string" != typeof t && null != t ? t.toString() : t) === (e = "string" != typeof e && null != e ? e.toString() : e) ? a.fn(this) : a.inverse(this)
        }), Handlebars.registerHelper("maskPassword", function(t) {
            return t.replace(/./gi, "*")
        }), Handlebars.registerHelper("encodeURIComponent", function(t) {
            return encodeURIComponent(t)
        }), Handlebars.registerHelper("ifCond", function(t, e, a, r) {
            switch (e) {
                case "==":
                    return t == a ? r.fn(this) : r.inverse(this);
                case "===":
                    return t === a ? r.fn(this) : r.inverse(this);
                case "!=":
                    return t != a ? r.fn(this) : r.inverse(this);
                case "!==":
                    return t !== a ? r.fn(this) : r.inverse(this);
                case "<":
                    return t < a ? r.fn(this) : r.inverse(this);
                case "<=":
                    return t <= a ? r.fn(this) : r.inverse(this);
                case ">":
                    return a < t ? r.fn(this) : r.inverse(this);
                case ">=":
                    return a <= t ? r.fn(this) : r.inverse(this);
                case "&&":
                    return t && a ? r.fn(this) : r.inverse(this);
                case "||":
                    return t || a ? r.fn(this) : r.inverse(this);
                case "typeof":
                    return t === typeof a ? r.fn(this) : r.inverse(this);
                case "not_typeof":
                    return t !== typeof a ? r.fn(this) : r.inverse(this);
                default:
                    return r.inverse(this)
            }
        }), Handlebars.registerHelper("for", function(t, e, a, r) {
            for (var n = "", o = t; o < e; o += a) n += r.fn(o);
            return n
        }), Handlebars.registerHelper("set_var", function(t, e, a) {
            a.data.root || (a.data.root = {}), a.data.root[t] = e
        }), Handlebars.registerHelper("get_length", function(t) {
            return void 0 !== t && !1 == t instanceof Array ? Object.keys(t).length : !0 == t instanceof Array ? t.length : 0
        }), t("#remote-storage-holder").length) {
        var e, r = "";
        for (e in syllablion.remote_storage_templates)
            if (void 0 !== syllablion.remote_storage_options[e] && 1 < Object.keys(syllablion.remote_storage_options[e]).length) {
                var n, o, d, u, i = Handlebars.compile(syllablion.remote_storage_templates[e]),
                    s = !0,
                    p = 1;
                for (n in syllablion.remote_storage_options[e]) "default" !== n && (void 0 === (o = syllablion.remote_storage_options[e][n]).instance_conditional_logic && (o.instance_conditional_logic = {
                    type: "",
                    rules: []
                }), o.instance_conditional_logic.day_of_the_week_options = syllablion.conditional_logic.day_of_the_week_options, o.instance_conditional_logic.logic_options = syllablion.conditional_logic.logic_options, o.instance_conditional_logic.operand_options = syllablion.conditional_logic.operand_options, o.instance_conditional_logic.operator_options = syllablion.conditional_logic.operator_options, o.first_instance = s, void 0 === o.instance_enabled && (o.instance_enabled = 1), void 0 !== o.instance_label && "" != o.instance_label || (d = syllablion.remote_storage_methods[e], u = 1 == p ? "" : " (" + p + ")", o.instance_label = d + u), r += i(o), s = !1, p++)
            } else r += syllablion.remote_storage_templates[e];
        t("#remote-storage-holder").append(r).ready(function() {
            t(".syllabplusmethod").not(".none").hide(), syllab_remote_storage_tabs_setup(), t("#remote-storage-holder .syllabplus_onedrive_folder_input").trigger("keyup")
        })
    }
}), jQuery(function(o) {
    function a(t) {
        var a = "";
        return "object" == (t = void 0 === t ? "string" : t) ? a = o("#syllab-navtab-settings-content form input[name!='action'][name!='option_page'][name!='_wpnonce'][name!='_wp_http_referer'], #syllab-navtab-settings-content form textarea, #syllab-navtab-settings-content form select, #syllab-navtab-settings-content form input[type=checkbox]").serializeJSON({
            checkboxUncheckedValue: "0",
            useIntKeysAsArrayIndex: !0
        }) : (a = o("#syllab-navtab-settings-content form input[name!='action'], #syllab-navtab-settings-content form textarea, #syllab-navtab-settings-content form select").serialize(), o.each(o("#syllab-navtab-settings-content form input[type=checkbox]").filter(function(t) {
            return 0 == o(this).prop("checked")
        }), function(t, e) {
            a += "&" + o(e).attr("name") + "=0"
        })), a
    }

    function r(t, e) {
        try {
            t.messages;
            var a = t.backup_dir.writable,
                r = t.backup_dir.message,
                n = t.backup_dir.button_title
        } catch (t) {
            return console.log(t), console.log(e), alert(syllablion.jsonnotunderstood), o.unblockUI(), {}
        }
        if (t.hasOwnProperty("changed"))
            for (prop in console.log("SyllabPlus: savesettings: some values were changed after being filtered"), console.log(t.changed), t.changed)
                if ("object" == typeof t.changed[prop])
                    for (innerprop in t.changed[prop]) o("[name='" + innerprop + "']").is(":checkbox") || o("[name='" + prop + "[" + innerprop + "]']").val(t.changed[prop][innerprop]);
                else o("[name='" + prop + "']").is(":checkbox") || o("[name='" + prop + "']").val(t.changed[prop]);
        return o("#syllab_writable_mess").html(r), 0 == a ? (o("#syllab-backupnow-button").attr("disabled", "disabled"), o("#syllab-backupnow-button").attr("title", n), o(".backupdirrow").css("display", "table-row")) : (o("#syllab-backupnow-button").prop("disabled", !1), o("#syllab-backupnow-button").removeAttr("title")), t.hasOwnProperty("syllab_include_more_path") && o("#backupnow_includefiles_moreoptions").html(t.syllab_include_more_path), t.hasOwnProperty("backup_now_message") && o("#backupnow_remote_container").html(t.backup_now_message), o(".syllabmessage").remove(), o("#syllab_backup_started").before(t.messages), console.log(t), o("#syllab-next-files-backup-inner").html(t.files_scheduled), o("#syllab-next-database-backup-inner").html(t.database_scheduled), t
    }

    function n() {
        var t, e = !1;
        jQuery("#syllab-authenticate-modal-innards").html(""), jQuery("div[class*=syllab_authenticate_] a.syllab_authlink").each(function() {
            jQuery("#syllab-authenticate-modal-innards").append('<p><a href="' + jQuery(this).attr("href") + '">' + jQuery(this).html() + "</a></p>"), e = !0
        }), e && ((t = {})[syllablion.cancel] = function() {
            jQuery(this).dialog("close")
        }, jQuery("#syllab-authenticate-modal").dialog({
            autoOpen: !0,
            modal: !0,
            resizable: !1,
            draggable: !1,
            resizeOnWindowResize: !0,
            scrollWithViewport: !0,
            resizeAccordingToViewport: !0,
            useContentSize: !1,
            open: function(t, e) {
                o(this).dialog("option", "width", 860), o(this).dialog("option", "height", 260)
            },
            buttons: t
        }).dialog("open"))
    }(new Image).src = syllablion.ud_url + "/images/notices/syllab_logo.png", o("#syllab-navtab-settings-content input.syllab_include_entity").on("change", function(t) {
        var e = o(this).attr("id"),
            a = o(this).is(":checked");
        o("#backupnow_files_" + e).prop("checked", a)
    }), o("#syllabplus-settings-save").on("click", function(t) {
        t.preventDefault(), o.blockUI({
            css: {
                width: "300px",
                border: "none",
                "border-radius": "10px",
                left: "calc(50% - 150px)",
                padding: "20px"
            },
            message: '<div style="margin: 8px; font-size:150%;" class="syllab_saving_popup"><img src="' + syllablion.ud_url + '/images/notices/syllab_logo.png" height="80" width="80" style="padding-bottom:10px;"><br>' + syllablion.saving + "</div>"
        }), syllab_send_command("savesettings", {
            settings: a("string"),
            syllabplus_version: syllablion.syllabplus_version
        }, function(t, e, a) {
            r(t, a), o("#syllab-wrap .fade").delay(6e3).fadeOut(2e3), window.syllab_main_tour && !window.syllab_main_tour.canceled ? (window.syllab_main_tour.show("settings_saved"), n()) : o("html, body").animate({
                scrollTop: o("#syllab-wrap").offset().top
            }, 1e3, function() {
                n()
            }), o.unblockUI()
        }, {
            action: "syllab_savesettings",
            error_callback: function(t, e, a, r) {
                o.unblockUI(), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), alert(a), console.log(t))
            },
            nonce: syllabplus_settings_nonce
        })
    }), o("#syllabplus-settings-export").on("click", function() {
        var t, e;
        syllab_settings_form_changed && alert(syllablion.unsaved_settings_export), t = a("object"), e = new Date, t = JSON.stringify({
            version: "1.12.40",
            epoch_date: e.getTime(),
            local_date: e.toLocaleString(),
            network_site_url: syllablion.network_site_url,
            data: t
        }), (e = document.body.appendChild(document.createElement("a"))).setAttribute("download", syllablion.export_settings_file_name), e.setAttribute("style", "display:none;"), e.setAttribute("href", "data:text/json;charset=UTF-8," + encodeURIComponent(t)), e.click()
    }), o("#syllabplus-settings-import").on("click", function() {
        o.blockUI({
            css: {
                width: "300px",
                border: "none",
                "border-radius": "10px",
                left: "calc(50% - 150px)",
                padding: "20px"
            },
            message: '<div style="margin: 8px; font-size:150%;" class="syllab_saving_popup"><img src="' + syllablion.ud_url + '/images/notices/syllab_logo.png" height="80" width="80" style="padding-bottom:10px;"><br>' + syllablion.importing + "</div>"
        });
        var t = document.getElementById("import_settings");
        if (0 == t.files.length) return alert(syllablion.import_select_file), void o.unblockUI();
        var e = t.files[0],
            t = new FileReader;
        t.onload = function() {
            ! function(e) {
                var t;
                try {
                    t = ud_parse_json(e)
                } catch (t) {
                    return o.unblockUI(), jQuery("#import_settings").val(""), console.log(e), console.log(t), alert(syllablion.import_invalid_json_file)
                }
                window.confirm(syllablion.importing_data_from + " " + t.network_site_url + "\n" + syllablion.exported_on + " " + t.local_date + "\n" + syllablion.continue_import) ? syllab_send_command("importsettings", {
                    settings: JSON.stringify(t.data),
                    syllabplus_version: syllablion.syllabplus_version
                }, function(t, e, a) {
                    t = r(t);
                    !t.hasOwnProperty("saved") || t.saved ? (syllab_settings_form_changed = !1, location.replace(syllablion.syllab_settings_url)) : (o.unblockUI(), t.hasOwnProperty("error_message") && t.error_message && alert(t.error_message))
                }, {
                    action: "syllab_importsettings",
                    nonce: syllabplus_settings_nonce,
                    error_callback: function(t, e, a, r) {
                        o.unblockUI(), void 0 !== r && r.hasOwnProperty("fatal_error") ? (console.error(r.fatal_error_message), alert(r.fatal_error_message)) : (a = "syllab_send_command: error: " + e + " (" + a + ")", console.log(a), console.log(t), alert(a))
                    }
                }) : o.unblockUI()
            }(this.result)
        }, t.readAsText(e)
    }), o(".slp-replace-with-iframe--js").on("click", function(t) {
        t.preventDefault();
        t = o(this).prop("href");
        o('<iframe width="356" height="200" allowfullscreen webkitallowfullscreen mozallowfullscreen>').attr("src", t).insertAfter(o(this)), o(this).remove()
    })
}), jQuery(function(d) {
    function u(t) {
        d(t).find(".syllabplus_spinner.spinner").addClass("visible")
    }

    function i(t) {
        d(t).find(".syllabplus_spinner.spinner").removeClass("visible")
    }

    function s(a, r) {
        u(r), syllab_send_command("process_syllabcentral_registration", a, function(t) {
            i(r);
            try {
                if ((a = ud_parse_json(t)).hasOwnProperty("error")) {
                    var e = a.message;
                    return -1 !== d.inArray(a.code, ["existing_user_email", "email_exists"]) && (e = a.message + " " + syllablion.perhaps_login), d(r).find(".syllabcentral_cloud_notices").html(e).addClass("syllabcentral_cloud_error"), d(r).find(".syllabcentral_cloud_notices a").attr("target", "_blank"), void console.log(a)
                }
                "registered" === a.status && (d(r).find(".syllabcentral_cloud_form_container").hide(), d(r).find(".syllabcentral-subheading").hide(), d(r).find(".syllabcentral_cloud_notices").removeClass("syllabcentral_cloud_error"), p(r, a, syllablion.registration_successful))
            } catch (t) {
                console.log(t)
            }
        }, {
            json_parse: !1
        })
    }

    function p(e, t, a) {
        var r = d(e).find("form#syllabcentral_cloud_redirect_form");
        r.attr("action", t.redirect_url), r.attr("target", "_blank"), void 0 !== t.redirect_token && r.append('<input type="hidden" name="redirect_token" value="' + t.redirect_token + '">'), t.hasOwnProperty("keys_table") && t.keys_table && d("#syllabcentral_keys_content").html(t.keys_table), d(".syllabplus-addons-connect-to-udc").remove(), $redirect_lnk = '<a href="' + syllablion.current_clean_url + '" class="syllabcentral_cloud_redirect_link">' + syllablion.syllabcentral_cloud + "</a>", $close_lnk = '<a href="' + syllablion.current_clean_url + '" class="syllabcentral_cloud_close_link">' + syllablion.close_wizard + "</a>", d(e).find(".syllabcentral_cloud_notices").html(a.replace("%s", $redirect_lnk) + " " + $close_lnk + "<br/><br/>" + syllablion.control_udc_connections), d(e).find(".syllabcentral_cloud_notices .syllabcentral_cloud_redirect_link").off("click").on("click", function(t) {
            t.preventDefault(), r.trigger("submit"), d(e).find(".syllabcentral_cloud_notices .syllabcentral_cloud_close_link").trigger("click")
        }), d(e).find(".syllabcentral_cloud_notices .syllabcentral_cloud_close_link").off("click").on("click", function(t) {
            t.preventDefault(), d(e).dialog("close"), d("#syllabcentral_cloud_connect_container").hide()
        })
    }

    function e(n, o) {
        ! function(t, e, a, r) {
            var n, o;
            "function" == typeof a && ((n = d(r).find("#syllabcentral_cloud_form").find('.form_hidden_fields input[name="key"]')).length && "" !== n.val() ? a.apply(this, [n.val()]) : (o = {
                where_send: "__syllabpluscom",
                key_description: "",
                key_size: t,
                mothership_firewalled: e
            }, u(r), syllab_send_command("syllabcentral_create_key", o, function(t) {
                i(r);
                try {
                    if ((o = ud_parse_json(t)).hasOwnProperty("error")) return void console.log(o);
                    o.hasOwnProperty("bundle") ? a.apply(this, [o.bundle]) : o.hasOwnProperty("r") ? (d(r).find(".syllabcentral_cloud_notices").html(syllablion.trouble_connecting).addClass("syllabcentral_cloud_info"), alert(o.r)) : console.log(o)
                } catch (t) {
                    console.log(t)
                }
            }, {
                json_parse: !1
            })))
        }(d(n).find("#syllab_central_keysize").val(), d(n).find("#syllab_central_firewalled").is(":checked") ? 1 : 0, function(t) {
            var e = d(n).find("#syllabcentral_cloud_form");
            0 === e.find('.form_hidden_fields input[name="key"]').length && e.find(".form_hidden_fields").append('<input type="hidden" name="key" value="' + t + '">');
            var a, r, e = {
                form_data: e.find("input").serialize()
            };
            void 0 !== o && o ? s(e, n) : (a = e, u(r = n), syllab_send_command("process_syllabcentral_login", a, function(t) {
                i(r);
                try {
                    if (data = ud_parse_json(t), data.hasOwnProperty("error")) {
                        if ("incorrect_password" === data.code && (d(r).find(".syllabcentral_cloud_form_container .tfa_fields").hide(), d(r).find(".syllabcentral_cloud_form_container .non_tfa_fields").show(), d(r).find("input#two_factor_code").val(""), d(r).find("input#password").val("").trigger("focus")), "email_not_registered" !== data.code) return d(r).find(".syllabcentral_cloud_notices").html(data.message).addClass("syllabcentral_cloud_error"), d(r).find(".syllabcentral_cloud_notices a").attr("target", "_blank"), void console.log(data);
                        s(a, r)
                    }
                    data.hasOwnProperty("tfa_enabled") && 1 == data.tfa_enabled && (d(r).find(".syllabcentral_cloud_notices").html("").removeClass("syllabcentral_cloud_error"), d(r).find(".syllabcentral_cloud_form_container .non_tfa_fields").hide(), d(r).find(".syllabcentral_cloud_form_container .tfa_fields").show(), d(r).find("input#two_factor_code").trigger("focus")), "authenticated" === data.status && (d(r).find(".syllabcentral_cloud_form_container").hide(), d(r).find(".syllabcentral_cloud_notices").removeClass("syllabcentral_cloud_error"), p(r, data, syllablion.login_successful))
                } catch (t) {
                    console.log(t)
                }
            }, {
                json_parse: !1
            }))
        }, n)
    }
    jQuery("#syllab-restore-modal").on("change", "#syllab_restorer_charset", function(t) {
        var e;
        d("#syllab_restorer_charset").length && d("#syllab_restorer_collate").length && d("#collate_change_on_charset_selection_data").length && (e = d("#syllab_restorer_charset").val(), d("#syllab_restorer_collate option").show(), d("#syllab_restorer_collate option[data-charset!=" + e + "]").hide(), syllab_send_command("collate_change_on_charset_selection", {
            collate_change_on_charset_selection_data: d("#collate_change_on_charset_selection_data").val(),
            syllab_restorer_charset: e,
            syllab_restorer_collate: d("#syllab_restorer_collate").val()
        }, function(t) {
            t.hasOwnProperty("is_action_required") && 1 == t.is_action_required && t.hasOwnProperty("similar_type_collate") && d("#syllab_restorer_collate").val(t.similar_type_collate)
        }))
    }), jQuery("#syllab-restore-modal").on("click", "#syllabplus_restore_tables_showmoreoptions", function(t) {
        t.preventDefault(), jQuery(".syllabplus_restore_tables_options_container").toggle()
    }), d("#syllab-wrap #btn_cloud_connect").on("click", function() {
        var t, e;
        (e = d("#syllabcentral_cloud_login_form")).length && (syllab_html_modal(e.html(), syllablion.syllabcentral_cloud, 520, 400), void 0 !== (e = (t = modal.find(".syllabcentral-data-consent")).find("input").attr("name")) && e && (t.find("input").attr("id", e), t.find("label").attr("for", e)))
    }), d("#syllab-wrap a#self_hosted_connect").on("click", function(t) {
        t.preventDefault(), d("h2.nav-tab-wrapper > a#syllab-navtab-expert").trigger("click"), d("div.advanced_settings_menu > #syllab_central").trigger("click")
    }), d("#syllab-iframe-modal").on("click", "#syllabcentral_cloud_login", function(t) {
        t.preventDefault();
        t = d(this).closest("#syllab-iframe-modal");
        ! function(t) {
            var e = d(t).find("#syllabcentral_cloud_form"),
                a = e.find("input#email").val(),
                r = e.find("input#password").val();
            if (d(t).find(".syllabcentral_cloud_notices").html("").removeClass("syllabcentral_cloud_error syllabcentral_cloud_info"), e.find('.syllabcentral-data-consent > input[name="i_consent"]').is(":checked"))
                if (0 !== a.length && 0 !== r.length) {
                    if (null !== a.match(/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,})+$/)) return 1;
                    d(t).find(".syllabcentral_cloud_notices").html(syllablion.valid_email_required).addClass("syllabcentral_cloud_error")
                } else d(t).find(".syllabcentral_cloud_notices").html(syllablion.username_password_required).addClass("syllabcentral_cloud_error");
            else d(t).find(".syllabcentral_cloud_notices").html(syllablion.data_consent_required).addClass("syllabcentral_cloud_error")
        }(t) || e(t)
    });
    var r = {};
    d(document).on("heartbeat-send", function(t, e) {
        r = syllab_poll_get_parameters(), e.syllabplus = r
    }), d(document).on("heartbeat-tick", function(t, e) {
        var a;
        null !== e && e.hasOwnProperty("syllabplus") && null != e.syllabplus && (syllab_process_status_check(a = e.syllabplus, JSON.stringify(a), r), e.syllabplus.hasOwnProperty("time_now") && jQuery("body.settings_page_syllabplus #syllab-navtab-backups-content .syllab_time_now_wrapper .syllab_time_now").empty().html(e.syllabplus.time_now))
    })
});